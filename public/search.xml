<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>云函数（serverless）</title>
      <link href="2020/10/15/serverless/"/>
      <url>2020/10/15/serverless/</url>
      
        <content type="html"><![CDATA[<p>Serverless，它是云计算发展过程中出现的一种计算资源的抽象，依赖第三方服务，开发者可以更加专注的开发自己的业务代码，而无需关心底层资源的分配、扩容和部署。</p><p>特征</p><ol><li>开发者只需要专注于业务，无需关心底层资源的分配、扩容和部署</li><li>按需使用和收费</li><li>自动扩缩容</li></ol><p><a href="https://serverlesscloud.cn/best-practice/2020-06-10-ssr-yuga">前端福音：Serverless 和 SSR 的天作之合 - 以腾讯云SCF为例</a></p><p><a href="https://www.sohu.com/a/198253530_115128">BaaS、FaaS、Serverless都是什么馅儿？</a></p><p><a href="https://www.yuque.com/midwayjs/faas">Midway Serverless 使用文档 - 阿里开源</a></p><p><a href="https://zhuanlan.zhihu.com/p/58877583">精读《Serverless 给前端带来了什么》</a></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>使用mac系统时出现的一个问题</p><p><img src="./WX20201015-145716@2x.png" alt=" "></p><p>按照其提供的<a href="https://github.com/meteor/meteor/issues/8057#issuecomment-261011063">方法</a>成功解决</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> kern.maxfiles=65536 | sudo tee -a /etc/sysctl.conf</span><br><span class="line">$ <span class="built_in">echo</span> kern.maxfilesperproc=65536 | sudo tee -a /etc/sysctl.conf</span><br><span class="line">$ sudo sysctl -w kern.maxfiles=65536</span><br><span class="line">$ sudo sysctl -w kern.maxfilesperproc=65536</span><br><span class="line">$ <span class="built_in">ulimit</span> -n 65536</span><br></pre></td></tr></table></figure><blockquote><p>仅适用于 <code>Mac</code> 系统</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> serverless </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑苹果折腾记</title>
      <link href="2020/08/26/hackintosh/"/>
      <url>2020/08/26/hackintosh/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>我们在开始前需要知道这几个网站, 因为所有资源都来自其中</p><p><a href="https://blog.daliansky.net/">黑果小兵的部落阁</a></p><p><a href="http://bbs.pcbeta.com/">远景论坛</a></p><p><a href="https://blog.xjn819.com/?p=543">使用OpenCore引导黑苹果</a></p><h2 id="我的电脑配置"><a href="#我的电脑配置" class="headerlink" title="我的电脑配置"></a>我的电脑配置</h2><table><thead><tr><th align="left">类目</th><th align="left">型号</th></tr></thead><tbody><tr><td align="left">处理器</td><td align="left">Intel i7-10700</td></tr><tr><td align="left">主板</td><td align="left">Gigabyte B460M AORUS PRO M-ATX</td></tr><tr><td align="left">显卡</td><td align="left">蓝宝石 RX5600XT 6G</td></tr><tr><td align="left">内存</td><td align="left">十铨（Team）DDR4 3200 16GB（8GB×2）火神系列</td></tr><tr><td align="left">硬盘</td><td align="left">金士顿(Kingston) 1TB SSD固态硬盘 M.2接口(NVMe协议) A2000系列</td></tr><tr><td align="left">无线</td><td align="left">博通BCM943602CS</td></tr><tr><td align="left">散热</td><td align="left">玄冰400双刃</td></tr><tr><td align="left">电源</td><td align="left">Tt 600W Toughpower GX1 RGB (80PLUS金牌/日系主电容/静音风扇)</td></tr><tr><td align="left">机箱</td><td align="left">Tt 启航者S3+黑色</td></tr><tr><td align="left">显示器</td><td align="left">优派4K 23.6英寸IPS VX2478-4K</td></tr></tbody></table><h2 id="制作MacOS系统安装盘-U盘"><a href="#制作MacOS系统安装盘-U盘" class="headerlink" title="制作MacOS系统安装盘(U盘)"></a>制作MacOS系统安装盘(U盘)</h2><p>系统镜像采用<a href="https://blog.daliansky.net/WeChat-First-macOS-Catalina-10.15.6-19G73-official-version-Clover-5119-OC-WEPE-supports-both-INTEL-and-AMD-original-images.html">微信首发】macOS Catalina 10.15.6 19G2021 正式版 Clover 5120/OC/PE三分区支持Intel及AMD双平台原版镜像</a></p><h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><p>请前往<a href="https://blog.daliansky.net/">黑果小兵的部落阁</a>或者关注<code>黑果小兵的部落阁</code>微信公众号下载镜像</p><blockquote><p>可选: 校验MD5值 <code>4a32cf1d5c37809dfb87f33eda5d50ed</code></p></blockquote><h3 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h3><p>下载<a href="https://etcher.io/">etcher</a> -&gt; 打开镜像 -&gt; 选择U盘 -&gt; 点击Flash即可.</p><blockquote><p>Windows10需要管理员权限<br>制作镜像需要一点时间, 请耐心等待</p></blockquote><h2 id="安装前的准备"><a href="#安装前的准备" class="headerlink" title="安装前的准备"></a>安装前的准备</h2><h3 id="BOIS基本设置"><a href="#BOIS基本设置" class="headerlink" title="BOIS基本设置"></a>BOIS基本设置</h3><p>实际上使用技嘉主板,只需要开启<code>VT-X</code>、禁用<code>VT-D</code>即可</p><p>禁用如下：</p><table><thead><tr><th align="left">英文</th><th align="left">中文</th></tr></thead><tbody><tr><td align="left">Fast Boot</td><td align="left">快速启动</td></tr><tr><td align="left">CFG Lock (MSR 0xE2 write protection)</td><td align="left">CFG 锁 (MSR 0xE2 写入保护)</td></tr><tr><td align="left">VT-d</td><td align="left">VT-d</td></tr><tr><td align="left">CSM</td><td align="left">兼容性支持模块</td></tr></tbody></table><p>启用如下：</p><table><thead><tr><th align="left">英文</th><th align="left">中文</th></tr></thead><tbody><tr><td align="left">VT-x</td><td align="left">VT-x</td></tr><tr><td align="left">Above 4G decoding</td><td align="left">大于 4G 地址空间解码</td></tr><tr><td align="left">Hyper Threading</td><td align="left">处理器超线程</td></tr><tr><td align="left">Execute Disable Bit</td><td align="left">执行禁止位</td></tr><tr><td align="left">EHCI/XHCI Hand-off</td><td align="left">接手 EHCI/XHCI 控制</td></tr><tr><td align="left">OS type: other types</td><td align="left">操作系统类型: 其他</td></tr></tbody></table><h3 id="拷贝适合自己的文件"><a href="#拷贝适合自己的文件" class="headerlink" title="拷贝适合自己的文件"></a>拷贝适合自己的文件</h3><p>引导U盘制作好了之后, 我们还需要根据自己电脑的硬件替换<code>EFI</code>下的<code>ACPI</code>、<code>Drivers</code>、<code>Kexts</code></p><ol><li>ACPI系统补丁文件</li><li>Drivers引导系统的驱动文件</li><li>Kexts安装系统的</li></ol><p>打开EFI—Kexts，我们把常用的一些kexts先放进去，一般情况下你需要放如下Kexts:</p><table><thead><tr><th align="left">名称</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">*Lilu.kext</td><td align="left">Acidanthera驱动全家桶的底层依赖/下载地址</td></tr><tr><td align="left">*Applealc.kext</td><td align="left">声卡驱动/下载地址</td></tr><tr><td align="left">*VirtualSMC.kext</td><td align="left">传感器驱动依赖 /下载地址</td></tr><tr><td align="left">*SMCProcessor.kext</td><td align="left">CPU核传感器/同上</td></tr><tr><td align="left">*SMCSuperIO.kext</td><td align="left">IO传感器/同上</td></tr><tr><td align="left">*WhateverGreen.kext</td><td align="left">核显&amp;显卡驱动/下载地址</td></tr><tr><td align="left">*IntelMausi.kext</td><td align="left">Intel类千兆网卡驱动/下载地址</td></tr><tr><td align="left">*Usbinjectall.kext</td><td align="left">USB驱动 （你也可以定制自己的USB补丁）/下载地址</td></tr><tr><td align="left">*NVMeFix.kext</td><td align="left">为NVME硬盘增加ASPT属性来保证节电，虽然对台式机没啥用，但是官方推荐所有NVME用户都使用此补丁/下载地址</td></tr></tbody></table><h3 id="编辑配置config-plist"><a href="#编辑配置config-plist" class="headerlink" title="编辑配置config.plist"></a>编辑配置<code>config.plist</code></h3><p>需要根据自己的配置编辑修改<code>config.plist</code></p><h2 id="EFI引导项配置"><a href="#EFI引导项配置" class="headerlink" title="EFI引导项配置"></a>EFI引导项配置</h2><p>这里需要用到<code>BOOTICE</code>工具</p><h2 id="我遇到的问题"><a href="#我遇到的问题" class="headerlink" title="我遇到的问题"></a>我遇到的问题</h2><ul><li>选择完之后跑日志, 循环刷日志, 屏幕中出现 🚫 符号</li></ul><p>这个问题后面发现是U盘插在3.0接口的问题, 所以<strong>务必</strong>使用2.0USB接口安装系统</p><ul><li>选择完之后, 跑完日志, 重启就黑屏了</li></ul><p>这个问题是由于<code>config.plist</code>中关于显卡配置的问题导致的. 可以参考以下链接</p><p><a href="https://github.com/xiaoyaowx/Hackintosh-Z490-ASRock-Steel-Legend-Intel-10700">见图配置</a></p><p><img src="./1.png" alt=" "></p><p>同时添加<code>SSDT-RX5600XT.aml</code>到<code>/EFI/ACPI/</code>下, 并在<code>config.plist</code>中配置好</p><ul><li>在进入MacOS安装界面后, 选择<code>磁盘工具</code>格式化需要安装MacOS的盘符时, 提示无法完成该操作</li></ul><p>这个问题是由于系统<code>ESP</code>分区过小的问题导致的, 我们进入win pe系统中,通过<code>d</code>添加<code>ESP</code>分区分配1G空间, 再重新进入安装工具格式化磁盘即可解决问题</p><h2 id="目前系统出现的问题"><a href="#目前系统出现的问题" class="headerlink" title="目前系统出现的问题"></a>目前系统出现的问题</h2><ul><li>无法睡眠,</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 黑苹果 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解javascript的执行机制</title>
      <link href="2020/08/24/javascript-event-queue/"/>
      <url>2020/08/24/javascript-event-queue/</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.im/post/6844903512845860872#heading-0">参考《这一次，彻底弄懂 JavaScript 执行机制 - 掘金》</a><br><a href="https://juejin.im/post/6844903764202094606">参考《一次弄懂Event Loop（彻底解决此类面试问题）- 掘金》</a><br><a href="https://zhuanlan.zhihu.com/p/139983258">参考《2020前端面试必会知识点 - 灰蓝宇墨的文章 - 知乎》</a></p><h2 id="关于JavaScript的说明"><a href="#关于JavaScript的说明" class="headerlink" title="关于JavaScript的说明"></a>关于JavaScript的说明</h2><p>JavaScript是一门<strong>单线程</strong>编程语言, 一切的关于JavaScript的多线程都是单线程模拟出来的</p><p>不管是什么新框架新语法糖实现的所谓异步, 其实都是用同步的方法去模拟的</p><h2 id="JavaScript的执行机制"><a href="#JavaScript的执行机制" class="headerlink" title="JavaScript的执行机制"></a>JavaScript的执行机制</h2><p>JavaScript的执行机制: <strong>事件循环(Event Loop)</strong></p><p>事件循环是js实现异步的一种方法，也是js的执行机制。</p><p>注意区分<strong>执行</strong>和<strong>运行</strong></p><h2 id="广义的同步任务和异步任务"><a href="#广义的同步任务和异步任务" class="headerlink" title="广义的同步任务和异步任务"></a>广义的同步任务和异步任务</h2><ol><li>同步任务</li><li>异步任务</li></ol><p><img src="./1.png" alt=" "></p><p>简单的文字描述图片中的内容:</p><ul><li>同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入<strong>Event Table</strong>并注册函数。</li><li>当指定的事情完成时，Event Table会将这个函数移入<strong>Event Queue</strong>。</li><li>主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。</li><li>上述过程会不断重复，也就是常说的**Event Loop(事件循环)**。</li></ul><blockquote><p>js引擎存在<strong>monitoring process</strong>进程，会持续不断的检查主线程执行栈是否为空，一旦为空，就会去Event Queue那里检查是否有等待被调用的函数</p></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>参考一下ajax的执行过程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = [];</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url:www.javascript.com,</span><br><span class="line">    data:data,</span><br><span class="line">    success:<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;发送成功!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;代码执行结束&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>ajax进入Event Table，注册回调函数success。</li><li>执行console.log(‘代码执行结束’)。</li><li>ajax事件完成，回调函数success进入Event Queue。</li><li>主线程从Event Queue读取回调函数success并执行。</li></ul><h3 id="常用-setTimeout、setInterval-函数"><a href="#常用-setTimeout、setInterval-函数" class="headerlink" title="常用 setTimeout、setInterval 函数"></a>常用 setTimeout、setInterval 函数</h3><h4 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h4><p>平时经常使用<code>setTimeout</code>函数定时执行一些业务</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;延时3秒&#x27;</span>);</span><br><span class="line">&#125;,<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>随着<code>setTimeout</code>的越来越多, 问题也就来了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;延时3秒&#x27;</span>);</span><br><span class="line">&#125;,<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;---&gt; 执行:console&#x27;</span>);</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ---&gt; 执行:console</span></span><br><span class="line"><span class="comment">// 延迟3秒</span></span><br></pre></td></tr></table></figure><p>这个结果是正确的, 但是我们稍微改一下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    task()</span><br><span class="line">&#125;,<span class="number">3000</span>);</span><br><span class="line">sleep(<span class="number">100000</span>); <span class="comment">// 这里假设执行业务代码耗时比较长</span></span><br></pre></td></tr></table></figure><p>这个时候执行<code>task()</code>输出时间就不止延迟3秒了,</p><ul><li><code>task()</code>进入Event Table并注册,计时开始。</li><li>执行<code>sleep</code>函数，很慢，非常慢，计时仍在继续。</li><li>3秒到了，计时事件timeout完成，<code>task()</code>进入Event Queue，但是<code>sleep</code>也太慢了吧，还没执行完，只好等着。</li><li><code>sleep</code>终于执行完了，<code>task()</code>终于从Event Queue进入了主线程执行。</li></ul><p><code>setTimeout</code>函数的定义是, 函数等待定义的时间之后才进入Event Queue, 又因为是单线程任务要一个一个执行，如果前面的任务需要的时间太久，那么只能等着，导致真正的延迟时间远远大于3秒</p><h4 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h4><p><code>setInterval</code>跟<code>setTimeout</code>效果差不多, 区别是<code>setInterval</code>会每隔指定的时间将注册的函数置入Event Queue，如果前面的任务耗时太久，那么同样需要等待.</p><p>唯一需要注意的一点是，对于setInterval(fn,ms)来说，我们已经知道不是每过ms秒会执行一次fn，而是每过ms秒，会有fn进入Event Queue。<strong>一旦setInterval的回调函数fn执行时间超过了延迟时间ms，那么就完全看不出来有时间间隔了。</strong></p><h2 id="任务还有更精细的定义-宏任务-微任务"><a href="#任务还有更精细的定义-宏任务-微任务" class="headerlink" title="任务还有更精细的定义 宏任务/微任务"></a>任务还有更精细的定义 宏任务/微任务</h2><ol><li>macro-task(宏任务)：包括整体代码script，setTimeout，setInterval</li><li>micro-task(微任务)：Promise，process.nextTick</li></ol><blockquote><p>不同类型的任务会进入对应的Event Queue，比如setTimeout和setInterval会进入相同的Event Queue。</p></blockquote><p>除了传统的定时器<code>setInterval</code>和<code>setTimeout</code>外, 我们还要了解的<code>Promise</code>和<code>process.nextTick</code></p><ol><li><code>Promise</code>可以参考<a href="https://es6.ruanyifeng.com/#docs/promise">阮一峰老师的Promise讲解</a></li><li><code>process.nextTick</code>类似node.js版的<code>setTimeout</code></li></ol><p>事件循环的顺序，决定js代码的执行顺序。进入整体代码(宏任务)后，开始第一次循环。接着执行所有的微任务。然后再次从宏任务开始，找到其中一个任务队列执行完毕，再执行所有的微任务。</p><p>举例:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;promise&#x27;</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;then&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;console&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>这段代码作为宏任务，进入主线程。</li><li>先遇到setTimeout，那么将其回调函数注册后分发到宏任务Event Queue。(注册过程与上同，下文不再描述)</li><li>接下来遇到了Promise，new Promise立即执行，then函数分发到微任务Event Queue。</li><li>遇到console.log()，立即执行。</li><li>好啦，整体代码script作为第一个宏任务执行结束，看看有哪些微任务？我们发现了then在微任务Event Queue里面，执行。</li><li>ok，第一轮事件循环结束了，我们开始第二轮循环，当然要从宏任务Event Queue开始。我们发现了宏任务Event Queue中setTimeout对应的回调函数，立即执行。</li><li>结束。</li></ul><p>关系图</p><p><img src="./2.png" alt=" "></p><p>一段较复杂的javascript代码, 分析一下它的输出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;4&#x27;</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;6&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;7&#x27;</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;8&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;10&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;11&#x27;</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;12&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>第一轮事件循环流程分析如下：</p><ol><li>整体script作为第一个宏任务进入主线程，遇到console.log，输出1。</li><li>遇到setTimeout，其回调函数被分发到宏任务Event Queue中。我们暂且记为setTimeout1。</li><li>遇到process.nextTick()，其回调函数被分发到微任务Event Queue中。我们记为process1。</li><li>遇到Promise，new Promise直接执行，输出7。then被分发到微任务Event Queue中。我们记为then1。</li><li>又遇到了setTimeout，其回调函数被分发到宏任务Event Queue中，我们记为setTimeout2。</li></ol><table><thead><tr><th align="center">宏任务Event Queue</th><th align="center">微任务Event Queue</th></tr></thead><tbody><tr><td align="center">setTimeout1</td><td align="center">process1</td></tr><tr><td align="center">setTimeout2</td><td align="center">then1</td></tr></tbody></table><blockquote><p>上表是第一轮事件循环宏任务结束时各Event Queue的情况，此时已经输出了1和7。</p></blockquote><p>我们发现了process1和then1两个微任务。</p><ol><li>执行process1,输出6。</li><li>执行then1，输出8。</li></ol><p>第一轮事件循环正式结束，这一轮的结果是输出<code>1，7，6，8</code>。</p><p>第二轮时间循环从setTimeout1宏任务开始: </p><ol><li>首先输出2。接下来遇到了<code>process.nextTick()</code>，同样将其分发到微任务Event Queue中，记为process2。</li><li><code>new Promise</code>立即执行输出4，then也分发到微任务Event Queue中，记为then2。</li></ol><table><thead><tr><th align="center">宏任务Event Queue</th><th align="center">微任务Event Queue</th></tr></thead><tbody><tr><td align="center">setTimeout2</td><td align="center">process2</td></tr><tr><td align="center"></td><td align="center">then2</td></tr></tbody></table><p>第二轮事件循环宏任务结束，我们发现有process2和then2两个微任务可以执行。</p><ol><li>输出3。</li><li>输出5。</li></ol><p>第二轮事件循环结束，第二轮输出<code>2，4，3，5</code>。</p><p>第三轮事件循环开始，此时只剩setTimeout2了，执行。</p><ol><li>直接输出9。</li><li>将process.nextTick()分发到微任务Event Queue中。记为process3。</li><li>直接执行new Promise，输出11。</li><li>将then分发到微任务Event Queue中，记为then3。</li></ol><table><thead><tr><th align="center">宏任务Event Queue</th><th align="center">微任务Event Queue</th></tr></thead><tbody><tr><td align="center"></td><td align="center">process3</td></tr><tr><td align="center"></td><td align="center">then3</td></tr></tbody></table><p>第三轮事件循环宏任务执行结束，执行两个微任务process3和then3。</p><ol><li>输出10。</li><li>输出12。</li></ol><p>第三轮事件循环结束，第三轮输出<code>9，11，10，12</code>。</p><p>整段代码，共进行了三次事件循环，完整的输出为<code>1，7，6，8，2，4，3，5，9，11，10，12</code>。*(请注意，node环境下的事件监听依赖libuv与前端环境不完全相同，输出顺序可能会有误差)*</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="javascript学习路线"><a href="#javascript学习路线" class="headerlink" title="javascript学习路线"></a>javascript学习路线</h3><p><img src="./3.jpg" alt=" "></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解一下Flutter</title>
      <link href="2020/08/06/flutter/"/>
      <url>2020/08/06/flutter/</url>
      
        <content type="html"><![CDATA[<p><a href="https://book.flutterchina.club/">Flutter实战</a></p><p>Flutter 是 <span style="color:red;">Google</span>推出并开源的移动应用开发框架，主打跨平台、高保真、高性能。开发者可以通过 Dart语言开发 App，一套代码同时运行在 iOS 和 Android平台。 Flutter提供了丰富的组件、接口，开发者可以很快地为 Flutter添加 native扩展。同时 Flutter还使用 Native引擎渲染视图，这无疑能为用户提供良好的体验。</p><h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><ul><li>Flutter使用自己的高性能渲染引擎来绘制<strong>widget</strong></li><li>目前Flutter默认支持iOS、Android、Fuchsia（Google新的自研操作系统）三个移动平台。但Flutter亦可支持Web开发（Flutter for web）和PC开发，本书的示例和介绍主要是基于iOS和Android平台的，其它平台读者可以自行了解。</li><li>Flutter APP采用Dart语言开发 Dart在 JIT（即时编译）模式下，速度与 JavaScript基本持平。但是 Dart支持 AOT，当以 AOT模式运行时，JavaScript便远远追不上了</li></ul><h2 id="Flutter框架结构"><a href="#Flutter框架结构" class="headerlink" title="Flutter框架结构"></a>Flutter框架结构</h2><p><img src="./1-1.png" alt="Flutter框架图" title="Flutter框架图"></p><h3 id="Flutter-Framework"><a href="#Flutter-Framework" class="headerlink" title="Flutter Framework"></a>Flutter Framework</h3><p>这是一个纯 Dart实现的 SDK，它实现了一套基础库，自底向上，我们来简单介绍一下：</p><ul><li>底下两层（Foundation和Animation、Painting、Gestures）在Google的一些视频中被合并为一个dart UI层，对应的是Flutter中的dart:ui包，它是Flutter引擎暴露的底层UI库，提供动画、手势及绘制能力。</li><li>Rendering层，这一层是一个抽象的布局层，它依赖于dart UI层，Rendering层会构建一个UI树，当UI树有变化时，会计算出有变化的部分，然后更新UI树，最终将UI树绘制到屏幕上，这个过程类似于React中的虚拟DOM。Rendering层可以说是Flutter UI框架最核心的部分，它除了确定每个UI元素的位置、大小之外还要进行坐标变换、绘制(调用底层dart:ui)。</li><li>Widgets层是Flutter提供的的一套基础组件库，在基础组件库之上，Flutter还提供了 Material 和Cupertino两种视觉风格的组件库。而我们Flutter开发的大多数场景，只是和这两层打交道。</li></ul><h3 id="Flutter-Engine"><a href="#Flutter-Engine" class="headerlink" title="Flutter Engine"></a>Flutter Engine</h3><p>这是一个纯 C++实现的 SDK，其中包括了 Skia引擎、Dart运行时、文字排版引擎等。在代码调用 dart:ui库时，调用最终会走到Engine层，然后实现真正的绘制逻辑。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron 学习笔记</title>
      <link href="2020/06/02/electron/"/>
      <url>2020/06/02/electron/</url>
      
        <content type="html"><![CDATA[<p><code>Electron</code> 是一个用 <code>HTML，CSS</code> 和 <code>JavaScript</code> 来构建跨平台桌面应用程序的一个开源库</p><p>原理为 <code>Electron</code> 通过将 <code>Chromium</code> 和 <code>Node.js</code> 合并到同一个运行时环境中，并将其打包为 <strong>Mac</strong>，<strong>Windows</strong> 和 <strong>Linux</strong> 系统下的应用来实现这一目的。</p><p><a href="https://www.electronjs.org/">官网</a></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>确保 <code>node</code> 和 <code>npm</code> 已经安装好了,</p><p>验证:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以看到node的版本信息</span></span><br><span class="line">node -v</span><br><span class="line"><span class="comment"># 可以看到npm的版本信息</span></span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>从开发的角度来看, Electron application 本质上是一个 Node. js 应用程序。 与 Node.js 模块相同，应用的入口是 package.json 文件</p><ol><li>使用 <code>npm</code> 创建一个 <code>nodejs</code> 项目</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个项目文件夹</span></span><br><span class="line">mkdir myapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进去</span></span><br><span class="line"><span class="built_in">cd</span> ./myapp</span><br><span class="line"></span><br><span class="line"><span class="comment"># npm初始化项目</span></span><br><span class="line">npm init</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2>]]></content>
      
      
      
        <tags>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>N1安装CoreELEC并安装Docker、Zerotier</title>
      <link href="2020/03/03/coreelec/"/>
      <url>2020/03/03/coreelec/</url>
      
        <content type="html"><![CDATA[<p>N1安装CoreELEC并安装Docker、Zerotier， 并设置Zerotier开机自启</p><h2 id="安装CoreELEC"><a href="#安装CoreELEC" class="headerlink" title="安装CoreELEC"></a>安装CoreELEC</h2><p><a href="https://www.right.com.cn/forum/thread-1135262-1-1.html">传送门</a></p><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>直接再CoreELEC的插件库 服务插件中安装即可</p><h3 id="使用-Portainer-工具管理-Docker"><a href="#使用-Portainer-工具管理-Docker" class="headerlink" title="使用 Portainer 工具管理 Docker"></a>使用 Portainer 工具管理 Docker</h3><p>在开发环境下使用此方式合适， 生产环境<strong>不建议</strong></p><ol><li>开启docker api</li><li>设置docker镜像源为国内源，（提高下载镜像的速度）</li></ol><p>修改启动文件</p><p><code>vi /storage/.kodi/addons/service.system.docker/system.d/service.system.docker.service</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line">Documentation=https://docs.docker.com</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">Environment=PATH=/bin:/sbin:/usr/bin:/usr/sbin:/storage/.kodi/addons/service.sys                                      tem.docker/bin</span><br><span class="line">ExecStartPre=/storage/.kodi/addons/service.system.docker/bin/docker-config</span><br><span class="line">EnvironmentFile=-/storage/.kodi/userdata/addon_data/service.system.docker/config                                      /docker.conf</span><br><span class="line">ExecStart=/storage/.kodi/addons/service.system.docker/bin/dockerd -H tcp://0.0.0                                      .0:2375 -H unix:///var/run/docker.sock --registry-mirror=https://el2yu6j2.mirror                                      .aliyuncs.com --exec-opt native.cgroupdriver=systemd --log-driver=journald --gro                                      up=root <span class="variable">$DOCKER_DAEMON_OPTS</span> <span class="variable">$DOCKER_STORAGE_OPTS</span></span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">TasksMax=8192</span><br><span class="line">LimitNOFILE=1048576</span><br><span class="line">LimitNPROC=1048576</span><br><span class="line">LimitCORE=infinity</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">Restart=on-abnormal</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">Alias=docker.service</span><br></pre></td></tr></table></figure><p><strong>注意 ExecStart 这个参数，我遇到的坑，就是这行命令不能换行</strong></p><p>加上 <code>-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock --registry-mirror=https://el2yu6j2.mirror.aliyuncs.com</code></p><p>重新启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl restart docker</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -anp |grep 2375</span><br></pre></td></tr></table></figure><p>查看docker是否监听 2375 端口</p><p><img src="./0.png" alt=" "></p><h2 id="安装Zerotier"><a href="#安装Zerotier" class="headerlink" title="安装Zerotier"></a>安装Zerotier</h2><h3 id="安装-ent"><a href="#安装-ent" class="headerlink" title="安装 ent"></a>安装 ent</h3><h3 id="zerotier-开机自启动"><a href="#zerotier-开机自启动" class="headerlink" title="zerotier 开机自启动"></a>zerotier 开机自启动</h3><p>zerotier的服务启动文件 <code>zerotier-one.service</code>, 放在 <code>/storage/.config/system.d/</code> 下面</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=zerotier-one                             <span class="comment"># 服务名称，不重复就🆗</span></span><br><span class="line">After=syslog.target network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/opt/var/lib/zerotier-one/zerotier-one.pid   <span class="comment"># 这里按照你的软件安装目录而定</span></span><br><span class="line">ExecStart=/opt/bin/zerotier-one -d                   <span class="comment"># 这里按照你的软件安装目录而定</span></span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">ExecStop=/bin/<span class="built_in">kill</span> -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line">User=root</span><br><span class="line">Group=root</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>执行命名：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl restart zerotier-one</span><br><span class="line">$ systemctl <span class="built_in">enable</span> zerotier-one</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2>]]></content>
      
      
      
        <tags>
            
            <tag> coreelec N1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>StreamSets</title>
      <link href="2020/02/03/streamsets/"/>
      <url>2020/02/03/streamsets/</url>
      
        <content type="html"><![CDATA[<p>StreamSets 是我在迁移mysql数据到clickhouse中发现的, 现在来总结一下</p><p>Streamsets是一款大数据实时采集和ETL工具，可以实现不写一行代码完成数据的采集和流转。通过拖拽式的可视化界面，实现数据管道(Pipelines)的设计和定时任务调度。最大的特点有：</p><ul><li>可视化界面操作，不写代码完成数据的采集和流转</li><li>内置监控，可是实时查看数据流传输的基本信息和数据的质量</li><li>强大的整合力，对现有常用组件全力支持，包括50种数据源、44种数据操作、46种目的地。</li></ul><p>对于Streamsets来说，最重要的概念就是数据源(Origins)、操作(Processors)、目的地(Destinations)。创建一个Pipelines管道配置也基本是这三个方面。</p><p>常见的Origins有Kafka、HTTP、UDP、JDBC、HDFS等；Processors可以实现对每个字段的过滤、更改、编码、聚合等操作；Destinations跟Origins差不多，可以写入Kafka、Flume、JDBC、HDFS、Redis等。</p><h2 id="使用docker创建-StreamSets-实例"><a href="#使用docker创建-StreamSets-实例" class="headerlink" title="使用docker创建 StreamSets 实例"></a>使用docker创建 StreamSets 实例</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -v /Users/aolei/app/streamsets/sdc-data:/data:rw -v /Users/aolei/app/streamsets/sdc-libs/jdbc:/opt/streamsets-datacollector-3.13.0/streamsets-libs-extras/streamsets-datacollector-jdbc-lib/lib/:rw -p 18630:18630 -d streamsets/datacollector dc</span><br></pre></td></tr></table></figure><h2 id="使用官方核心包运行"><a href="#使用官方核心包运行" class="headerlink" title="使用官方核心包运行"></a>使用官方核心包运行</h2><p><a href="https://streamsets.com/">官网</a></p><p><a href="https://streamsets.com/products/dataops-platform/open-source/">官网下载地址直达</a></p><blockquote><p>下载之前需要填写一些简单的信息</p></blockquote><h3 id="配置很简单"><a href="#配置很简单" class="headerlink" title="配置很简单"></a>配置很简单</h3><p>保存streamsets的配置 <code>-v /Users/aolei/app/streamsets/sdc-data:/data:rw</code></p><p>使用本地的 libs <code>-v /Users/aolei/app/streamsets/sdc-libs/lib:/opt/ streamsets-datacollector-3.13.0/streamsets-libs/:rw</code></p><h2 id="StreamSets-迁移-mysql-clickhouse-使用"><a href="#StreamSets-迁移-mysql-clickhouse-使用" class="headerlink" title="StreamSets 迁移 mysql - clickhouse 使用"></a>StreamSets 迁移 mysql - clickhouse 使用</h2><h3 id="准备所需的jdbc-jar包"><a href="#准备所需的jdbc-jar包" class="headerlink" title="准备所需的jdbc jar包"></a>准备所需的jdbc jar包</h3><p>如果本地有 maven 环境的, 可以创建一个 <code>pom.xml</code> 文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.anjia<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ru.yandex.clickhouse<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>clickhouse-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.54<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行 <code>mvn dependency:copy-dependencies -DoutputDirectory=lib -DincludeScope=compile</code> 会在当前目录下生成<strong>lib</strong>文件夹,复制其中的jar包到<code>/Users/aolei/app/streamsets/sdc-libs/lib</code>(<em>你本地映射的streamsets lib目录</em>)</p><h2 id="腾讯云容器部署的小bug"><a href="#腾讯云容器部署的小bug" class="headerlink" title="腾讯云容器部署的小bug"></a>腾讯云容器部署的小bug</h2><p>使用腾讯云容器部署的时候,外挂硬盘,容器启动后没有读写权限; 我的解决方案是先用正常启动的容器启动成功,远程登陆<code>chmod -R 775 /data/</code>,再切换回streamsets容器即可</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><a href="https://www.jianshu.com/p/870e1bb52da4">本文借鉴-简书 北邮郭大宝</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows10下的子系统Linux</title>
      <link href="2020/01/08/msl/"/>
      <url>2020/01/08/msl/</url>
      
        <content type="html"><![CDATA[<p>Windows10出了一款子系统Linux,可以方便开发者不在需要依赖虚拟机啦</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>首先你得是windows10最新版本的系统</p><p>进入 系统设置 -&gt; 更新和安全 -&gt; 开发者选项 打开</p><p><img src="./WX20200108-154615@2x.png" alt=" "></p><p><img src="./WX20200108-154856@2x.png" alt=" "></p><p>其次是 进入 控制面板-程序和功能-启用或关闭Windows功能下 选择 “适用于Linux的Window之系统”</p><p><img src="./WX20200108-155336@2x.png" alt=" "></p><p>然后<strong>重启系统</strong></p><h2 id="安装Linux系统"><a href="#安装Linux系统" class="headerlink" title="安装Linux系统"></a>安装Linux系统</h2><p>打开Windows10的应用商店, 搜索Linux会得到以下结果, 点击第一个进入</p><p><img src="./A84A183D1145E8245B6A7C8A84FB985F.jpg" alt=" "></p><p><img src="./WX20200108-155928@2x.png" alt=" "></p><p>这里我安装的是第一个 Ubuntu 系统</p><p><img src="./WX20200108-160028@2x.png" alt=" "></p><p>点击安装, 等待安装完成</p><h2 id="进入Linux系统"><a href="#进入Linux系统" class="headerlink" title="进入Linux系统"></a>进入Linux系统</h2><p>安装完成之后, <code>Ctrl + R</code>打开CMD, 输入 <code>bash</code> 就会进入Linux系统了</p><p>根据提示, 设置用户名、密码就好了</p><p><img src="./20180912154639866.png" alt=" "></p><h2 id="子系统Ubuntu进阶-可选"><a href="#子系统Ubuntu进阶-可选" class="headerlink" title="子系统Ubuntu进阶(可选)"></a>子系统Ubuntu进阶(可选)</h2><h3 id="升级到-WSL2"><a href="#升级到-WSL2" class="headerlink" title="升级到 WSL2"></a>升级到 WSL2</h3><p><strong>先决条件</strong> 运行 <code>Windows 10</code>（已更新到版本 <em>2004</em> 的内部版本 <em>19041</em> 或更高版本）</p><p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10">官方文档</a></p><p>打开 cmd</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 将当前wsl版本设置为<span class="number">2</span>  `wsl --<span class="built_in">set</span>-version &lt;distribution name&gt; &lt;versionNumber&gt;`</span><br><span class="line">wsl --<span class="built_in">set</span>-version Ubuntu <span class="number">18</span>.<span class="number">04</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"># 将wsl默认版本设置为 <span class="number">2</span>  (后续安装wsl子系统都将以wsl2版本安装)</span><br><span class="line">wsl --<span class="built_in">set</span>-default-version <span class="number">2</span></span><br><span class="line"></span><br><span class="line"># 查看当前 wsl 版本</span><br><span class="line">wsl -l -v</span><br></pre></td></tr></table></figure><p><img src="./WX20200108-164517@2x.png" alt=" "></p><h3 id="更换-apt-get-安装源-可选、觉得网速好的可以不换"><a href="#更换-apt-get-安装源-可选、觉得网速好的可以不换" class="headerlink" title="更换 apt-get 安装源(可选、觉得网速好的可以不换)"></a>更换 apt-get 安装源(可选、觉得网速好的可以不换)</h3><p>一般新安装的Linux系统都需要更新软件仓库的, 但是Ubuntu的默认仓库源是国外的,更新数据比较慢, 我们可以先更换软件仓库源为国内的(个人一般喜欢用<em>阿里</em>的源)</p><h4 id="准备源"><a href="#准备源" class="headerlink" title="准备源"></a>准备源</h4><p>查看系统版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure><p><img src="./WX20200108-164517@2x.png" alt=" "></p><blockquote><p>Codename 是你的系统版本代号<br>Ubuntu 12.04 (LTS)代号为precise。<br>Ubuntu 14.04 (LTS)代号为trusty。<br>Ubuntu 15.04 代号为vivid。<br>Ubuntu 15.10 代号为wily。<br>Ubuntu 16.04 (LTS)代号为xenial。<br>Ubuntu 18.04 (LTS)代号为bionic</p></blockquote><p>Ubuntu 18.04 (LTS)代号为bionic 对应阿里云镜像仓库的地址为:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/zhangjiahao14/article/details/80554616">这里最后面说明了,为什么要关注这个系统的版本号</a></p><h3 id="修改-etc-apt-sources-list-文件"><a href="#修改-etc-apt-sources-list-文件" class="headerlink" title="修改 /etc/apt/sources.list 文件"></a>修改 <code>/etc/apt/sources.list</code> 文件</h3><p>我们需要修改 <code>/etc/apt/sources.list</code> 文件</p><p>第一步: 备份 <code>/etc/apt/sources.list</code> 文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure><blockquote><p>.bak 后缀的文件是linux系统中的备份文件</p></blockquote><p>第二部: 修改 <code>/etc/apt/sources.list</code> 文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p><img src="./WX20200108-163130@2x.png" alt=" "></p><p>打开之后是这样的</p><p>注释已有的源, 粘贴阿里的镜像地址保存即可</p><p>vim编辑器说明:</p><p>vi编辑器一共有三种模式，分别是命令模式（command mode）<em>默认</em>、插入模式（Insert mode）和底行模式（last line mode）。命令模式下我们只能控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下，或者到 last line mode等；插入模式下可以做文字输入，按「ESC」键可回到命令行模式；底行模式下，可以将文件保存或退出vi，也可以设置编辑环境，如寻找字符串、列出行号等。</p><p>vim编辑器的常用命令:</p><ol><li><code>vim /etc/apt/sources.list</code> 打开文件(不存在的文件,在保存时自动创建) 默认(命令模式)</li><li><code>i</code> (插入模式) 在光标前开始插入</li><li><code>a</code> (插入模式) 在光标后开始插入</li><li><code>shift + :</code> (命令模式) 调出vim的命令行, 输入命令(<code>wq</code>保存退出、<code>q!</code>不保存退出、 <code>w</code>仅保存)</li><li><code>d + up键</code> (命令模式) <em>浏览模式下</em> 删除一行</li></ol><h4 id="apt-get-update、-apt-get-upgrade-不要忘记了-不管有没有换源都要执行的"><a href="#apt-get-update、-apt-get-upgrade-不要忘记了-不管有没有换源都要执行的" class="headerlink" title="apt-get update、 apt-get upgrade 不要忘记了, 不管有没有换源都要执行的"></a>apt-get update、 apt-get upgrade 不要忘记了, 不管有没有换源都要执行的</h4><h3 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h3><p><em>zsh</em>是一个终端shell程序,比默认的bash终端好用, 可以搭配<em>oh-my-zsh</em>美化你的命令行</p><p>官网<a href="https://ohmyz.sh/">oh-my-zsh</a></p><h4 id="安装-zsh-oh-my-zsh"><a href="#安装-zsh-oh-my-zsh" class="headerlink" title="安装 zsh oh-my-zsh"></a>安装 zsh oh-my-zsh</h4><p>安装zsh</p><p><code>sudo apt-get install zsh</code></p><p>检查zsh</p><p><code>zsh --version</code></p><p>如果没有看到版本号、或者报错,则说明安装失败了</p><p>设置为默认终端</p><p><code>sudo chsh -s /usr/bin/zsh &lt;username&gt;</code></p><p>如果报错, 则看一下 <code>/etc/shells</code> 文件中是否包含 <code>/bin/zsh</code>、<code>/usr/bin/zsh</code>, 没有就添加</p><p><img src="./WX20200108-173249@2x.png" alt=" "></p><p>顺序不重要</p><p>再次执行 <code>sudo chsh -s /usr/bin/zsh &lt;username&gt;</code></p><p>成功则<strong>关闭终端,重新打开(退出用户,重新登陆)</strong></p><p>执行 <code>bash</code> 进入Linux子系统</p><p>执行 <code>echo $SHELL</code> 会输出 <code>/bin/zsh</code></p><p>执行 <code>$SHELL --version</code> 会输出 <code>zsh 5.4.2 (x86_64-ubuntu-linux-gnu)</code></p><p>上面两部执行正确,则说明安装zsh并设置为默认终端成功了,</p><h4 id="我遇到的windows10子系统的一个问题"><a href="#我遇到的windows10子系统的一个问题" class="headerlink" title="我遇到的windows10子系统的一个问题"></a>我遇到的windows10子系统的一个问题</h4><p>在设置为默认终端时,为参考官方教程来做,无法将zsh设置为默认终端</p><p>官方命令: <code>sudo chsh -s $(which zsh)</code></p><p>检查是否设置默认成功: <code>echo $SHELL</code></p><p>终端应该输出: <code>/bin/zsh</code>, 如果不是 或者是 空 则说明默认配置是失败的</p><p>查看 <code>/etc/passwd</code> 文件中 对应你的用户配置 是否是 指定 <code>/bin/zsh</code></p><h5 id="最终解决问题的办法"><a href="#最终解决问题的办法" class="headerlink" title="最终解决问题的办法"></a>最终解决问题的办法</h5><p>编辑 <code>~/.bash_profile</code> 文件，（不存在就创建）</p><p>加入以下类容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定 zsh的目录</span></span><br><span class="line"><span class="built_in">export</span> SHELL=/bin/zsh</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$SHELL</span>:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每次打开终端的时候运行zsh</span></span><br><span class="line"><span class="built_in">exec</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure><p><img src="./WX20200108-173321@2x.png" alt=" "></p><p>执行 <code>sudo chsh -s /usr/bin/zsh &lt;username&gt;</code> 命令 (最后面对应你的用户名)</p><h4 id="下载-oh-my-zsh-美化zsh"><a href="#下载-oh-my-zsh-美化zsh" class="headerlink" title="下载 oh-my-zsh 美化zsh"></a>下载 oh-my-zsh 美化zsh</h4><p>参考官方的教程</p><p>使用 curl</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>使用 wget</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>默认是 robbyrussell 样式</p><p>修改 <code>~/.zshrc</code> 的 <code>ZSH_THEME=robbyrussell</code> 值 即可更换样式, 如果你不想要任何样式,则将值设置为””即可</p><p><a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">主题库</a></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>后面需要学习的:</p><ol><li>安装docker</li><li>putty远程连接</li></ol><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>…</p>]]></content>
      
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>梅林安装zerotier</title>
      <link href="2020/01/02/meilin-zerotier/"/>
      <url>2020/01/02/meilin-zerotier/</url>
      
        <content type="html"><![CDATA[<p>网件R7000刷梅林, 安装zerotier内网穿透工具, 并配置开机自启</p><p><a href="http://koolshare.cn/forum.php?mod=viewthread&tid=134930&extra=&ordertype=1">参考</a></p><h2 id="安装-entware"><a href="#安装-entware" class="headerlink" title="安装 entware"></a>安装 entware</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /opt</span><br><span class="line"></span><br><span class="line">mkdir /opt</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line"></span><br><span class="line">wget -O - http://qnapware.zyxmon.org/binaries-armv7/installer/entware_install_arm.sh | sh</span><br></pre></td></tr></table></figure><blockquote><p>然后会提示你选择哪个分区，选择你挂载的U盘分区</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">···省略</span><br><span class="line">Info:  Looking <span class="keyword">for</span> available partitions...</span><br><span class="line">[1] --&gt; /tmp/mnt/sda1</span><br><span class="line">=&gt;  Please enter partition number or 0 to <span class="built_in">exit</span></span><br><span class="line">[0-1]: 1 <span class="comment"># 选1回车</span></span><br><span class="line">···省略</span><br></pre></td></tr></table></figure><blockquote><p>跑完之后只要不提示错误，就是安装成功了</p></blockquote><h3 id="配置entware环境变量"><a href="#配置entware环境变量" class="headerlink" title="配置entware环境变量"></a>配置entware环境变量</h3><p><code>vim /etc/profile</code></p><p>直接在前面/usr/sbin:这行下直接添加下面两行并保存退出（ESC+:wq+Enter）</p><p><code>/opt/bin:/opt/sbin:</code></p><p>使配置生效</p><p><code>source /etc/profile</code></p><h3 id="检查entware环境安装情况看是否报错"><a href="#检查entware环境安装情况看是否报错" class="headerlink" title="检查entware环境安装情况看是否报错"></a>检查entware环境安装情况看是否报错</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br><span class="line"></span><br><span class="line">opkg list</span><br></pre></td></tr></table></figure><h2 id="安装-zerotier"><a href="#安装-zerotier" class="headerlink" title="安装 zerotier"></a>安装 zerotier</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br><span class="line"></span><br><span class="line">opkg install zerotier</span><br></pre></td></tr></table></figure><h2 id="启动zerotier服务"><a href="#启动zerotier服务" class="headerlink" title="启动zerotier服务"></a>启动zerotier服务</h2><h2 id="添加端口映射表"><a href="#添加端口映射表" class="headerlink" title="添加端口映射表"></a>添加端口映射表</h2><h2 id="重启zerotier服务"><a href="#重启zerotier服务" class="headerlink" title="重启zerotier服务"></a>重启zerotier服务</h2><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>安装zerotier之前先安装 entware, 这样才能安装最新版本的zerotier</li></ol><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>……</p>]]></content>
      
      
      
        <tags>
            
            <tag> 路由器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql的explain命令</title>
      <link href="2020/01/02/mysql-explain/"/>
      <url>2020/01/02/mysql-explain/</url>
      
        <content type="html"><![CDATA[<p><strong>explain</strong>关键字可以模拟MySQL优化器执行SQL语句，可以很好的分析SQL语句或表结构的性能瓶颈.</p><h2 id="explain的用途"><a href="#explain的用途" class="headerlink" title="explain的用途"></a>explain的用途</h2><ol><li>表的读取顺序如何</li><li>数据读取操作有哪些操作类型</li><li>哪些索引可以使用</li><li>哪些索引被实际使用</li><li>表之间是如何引用</li><li>每张表有多少行被优化器查询</li><li>……</li></ol><h2 id="explain的主要字段有"><a href="#explain的主要字段有" class="headerlink" title="explain的主要字段有"></a>explain的主要字段有</h2><ol><li><strong>id</strong> select查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序</li><li><strong>select_type</strong> 查询类型</li><li><strong>table</strong> 正在访问哪个表</li><li><strong>partitions</strong> 匹配的分区</li><li><strong>type</strong> 访问的类型</li><li><strong>possible_keys</strong> 显示可能应用在这张表中的索引，一个或多个，但不一定实际使用到</li><li><strong>key</strong> 实际使用到的索引，如果为NULL，则没有使用索引</li><li><strong>key_len</strong> 表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度</li><li><strong>ref</strong> 显示索引的哪一列被使用了，如果可能的话，是一个常数，哪些列或常量被用于查找索引列上的值</li><li><strong>rows</strong> 根据表统计信息及索引选用情况，大致估算出找到所需的记录所需读取的行数</li><li><strong>filtered</strong> 查询的表行占表的百分比</li><li><strong>Extra</strong> 包含不适合在其它列中显示但十分重要的额外信息</li></ol><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p><img src="./2864885534-202c0878c1abf896.png" alt=" "></p><p>……</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小钢炮安装zerotier实现内网穿透</title>
      <link href="2020/01/02/xgp-zerotier/"/>
      <url>2020/01/02/xgp-zerotier/</url>
      
        <content type="html"><![CDATA[<p>小钢炮安装zerotier实现内网穿透</p><h2 id="安装zerotier"><a href="#安装zerotier" class="headerlink" title="安装zerotier"></a>安装zerotier</h2><h3 id="一、安装-entware"><a href="#一、安装-entware" class="headerlink" title="一、安装 entware"></a>一、安装 entware</h3><p>为了安装最新版本的zerotier,我们需要先安装 <em>entware</em></p><p>执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /opt</span><br><span class="line"></span><br><span class="line">mkdir /opt</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line"></span><br><span class="line">wget -O - http://bin.entware.net/aarch64-k3.10/installer/alternative.sh | sh</span><br></pre></td></tr></table></figure><p>将自带opkg改名为opkg_bak暂时停用 灯大固件更新可以改回来免重装系统更新软件</p><p>mv /usr/bin/opkg /usr/bin/opkg_bak</p><h3 id="二、配置entware环境变量"><a href="#二、配置entware环境变量" class="headerlink" title="二、配置entware环境变量"></a>二、配置entware环境变量</h3><p><code>vim /etc/profile</code></p><p>直接在前面/usr/sbin:这行下直接添加下面两行并保存退出（ESC+:wq+Enter）</p><p><code>/opt/bin:/opt/sbin:</code></p><p>使配置生效</p><p><code>source /etc/profile</code></p><h3 id="三、检查entware环境安装情况看是否报错"><a href="#三、检查entware环境安装情况看是否报错" class="headerlink" title="三、检查entware环境安装情况看是否报错"></a>三、检查entware环境安装情况看是否报错</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">opkg update</span><br><span class="line"></span><br><span class="line">opkg list</span><br></pre></td></tr></table></figure><h3 id="四、安装zerotier"><a href="#四、安装zerotier" class="headerlink" title="四、安装zerotier"></a>四、安装zerotier</h3><p><code>opkg install zerotier</code></p><p>启动zerotier</p><p><code>zerotier-one -d</code></p><p>查看服务状态</p><p><code>zerotier-one info</code></p><h2 id="加入已有zerotier网络"><a href="#加入已有zerotier网络" class="headerlink" title="加入已有zerotier网络"></a>加入已有zerotier网络</h2><ol><li>登陆并打开你的zerotier网络管理页面</li><li>拷贝你的网络ID</li></ol><p><img src="./CD65E8E75C1CBF3BF60AFBF278909ACD.jpg" alt=" "></p><p>加入网络 <code>zerotier-cli join &lt;netowkr-id&gt;</code></p><p>查看网络状态 <code>zerotier-cli listnetworks</code></p><h2 id="设置开机自启"><a href="#设置开机自启" class="headerlink" title="设置开机自启"></a>设置开机自启</h2><p>创建 /etc/init.d/S60zerotier-one.sh 文件</p><p>编辑为以下内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">  start)</span><br><span class="line">    <span class="keyword">if</span> ( pidof zerotier-one )</span><br><span class="line">    <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&quot;ZeroTier-One is already running.&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Starting ZeroTier-One&quot;</span> ;</span><br><span class="line">        /opt/bin/zerotier-one -d ;</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(date)</span> Started ZeroTier-One&quot;</span> &gt;&gt; /opt/var/<span class="built_in">log</span>/zerotier-one.log ;</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    ;;</span><br><span class="line">  stop)</span><br><span class="line">    <span class="keyword">if</span> ( pidof zerotier-one )</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Stopping ZeroTier-One&quot;</span>;</span><br><span class="line">        killall zerotier-one</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(date)</span> Stopped ZeroTier-One&quot;</span> &gt;&gt; /opt/var/<span class="built_in">log</span>/zerotier-one.log</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;ZeroTier-One was not running&quot;</span> ;</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    ;;</span><br><span class="line">  status)</span><br><span class="line">    <span class="keyword">if</span> ( pidof zerotier-one )</span><br><span class="line">    <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&quot;ZeroTier-One is running.&quot;</span></span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">echo</span> <span class="string">&quot;ZeroTier-One is NOT running&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Usage: /etc/init.d/zerotier-one &#123;start|stop|status&#125;&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>授予权限</strong></p><p><code>chmod 777 /etc/init.d/S60zerotier-one.sh</code></p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>完成以上操作即可在小钢炮中安装zerotier并实现开机自启</p>]]></content>
      
      
      
        <tags>
            
            <tag> 小钢炮 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GraphQL 学习</title>
      <link href="2019/10/22/graphql/"/>
      <url>2019/10/22/graphql/</url>
      
        <content type="html"><![CDATA[<p>GraphQL 既是一种用于 API 的查询语言也是一个满足你数据查询的运行时。 GraphQL 对你的 API 中的数据提供了一套易于理解的完整描述，使得客户端能够准确地获得它需要的数据，而且没有任何冗余，也让 API 更容易地随着时间推移而演进，还能用于构建强大的开发者工具。</p><p><a href="https://www.apollographql.com/docs/apollo-server">官网文档</a></p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>这里使用 nodejs 来创建demo, 使用到的npm包如下:</p><ol><li>fastify</li><li>apollo-server-fastify</li></ol><h3 id="定义GraphQL-模型"><a href="#定义GraphQL-模型" class="headerlink" title="定义GraphQL 模型"></a>定义GraphQL 模型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; gql &#125; <span class="keyword">from</span> <span class="string">&#x27;apollo-server-core&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> typeDefs = gql<span class="string">`</span></span><br><span class="line"><span class="string">    # 自定义 类型</span></span><br><span class="line"><span class="string">    scalar Date</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 自定义一个模型</span></span><br><span class="line"><span class="string">    type Book &#123;</span></span><br><span class="line"><span class="string">        title: String</span></span><br><span class="line"><span class="string">        author: String</span></span><br><span class="line"><span class="string">        sex: String</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    ...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 定义输入模型</span></span><br><span class="line"><span class="string">    input BookForm &#123;</span></span><br><span class="line"><span class="string">        title: String!</span></span><br><span class="line"><span class="string">        author: String!</span></span><br><span class="line"><span class="string">        sex: String!</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # Query 定义查询的方法</span></span><br><span class="line"><span class="string">    type Query &#123;</span></span><br><span class="line"><span class="string">        # 查询所以 books 的方法</span></span><br><span class="line"><span class="string">        getBooks: [Book]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # Mutation 定义更新的方法</span></span><br><span class="line"><span class="string">    type Mutation &#123;</span></span><br><span class="line"><span class="string">        addBook(book: BookForm): Boolean</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><ol><li>自定义类型用 <code>scalar</code> 标注</li><li>自定义模型用 <code>type</code> 标注</li><li>输入模型用 <code>input</code> 标注 (与模型的唯一区别是 关键字不同)</li></ol><blockquote><p>Query 和 Mutation 是GraphQL内的两个特殊模型, 我们在这里定义 <em>查询</em> 和 <em>更新</em> 及返回类型, typeDefs中只能各存在一个.</p></blockquote><h3 id="定义GraphQL的-resolver"><a href="#定义GraphQL的-resolver" class="headerlink" title="定义GraphQL的 resolver"></a>定义GraphQL的 resolver</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> resolvers = &#123;</span><br><span class="line">    Query: &#123;</span><br><span class="line">        <span class="comment">// Query中实现typeDefs中定义的查询</span></span><br><span class="line">        getBooks: <span class="function">(<span class="params">obj: <span class="built_in">any</span>, args: <span class="built_in">any</span>, context: <span class="built_in">any</span>, info: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> [];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    Mutation: &#123;</span><br><span class="line">        <span class="comment">// Mutation中实现typeDefs中定义的更新</span></span><br><span class="line">        addBook: <span class="function">(<span class="params">obj: <span class="built_in">any</span>, args: <span class="built_in">any</span>, context: <span class="built_in">any</span>, info: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;----&gt; params&#x27;</span>, args[<span class="string">&#x27;book&#x27;</span>])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 实现typeDefs中自定义的模型</span></span><br><span class="line">    Book: &#123;</span><br><span class="line">        <span class="comment">// 针对 单个属性定义</span></span><br><span class="line">        sex: <span class="function">(<span class="params">book:<span class="built_in">any</span>, args: <span class="built_in">any</span>, context: <span class="built_in">any</span>, info: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> book.sex === <span class="number">1</span> ? <span class="string">&#x27;男&#x27;</span> : <span class="string">&#x27;女&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ... 多个自定义模型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意: resolver 中 Query和Mutation 只能有一个</p></blockquote><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ApolloServer &#125; <span class="keyword">from</span> <span class="string">&#x27;apollo-server-fastify&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> fastify <span class="keyword">from</span> <span class="string">&#x27;fastify&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gqlserver =  <span class="keyword">new</span> ApolloServer(&#123;</span><br><span class="line">    typeDefs,</span><br><span class="line">    resolvers</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fast.register(gqlserver.createHandler());</span><br><span class="line"></span><br><span class="line">fast.listen(<span class="number">3000</span>, <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="keyword">async</span> (err, address) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        fast.log.error(err, address);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.info(<span class="string">`service start success &gt; <span class="subst">$&#123;address&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.zhaiqianfeng.com/2017/06/learn-graphql-first-demo.html"></a></p><p><a href="http://www.zhaiqianfeng.com/2017/06/learn-graphql-type-system.html"></a></p><p><a href="http://www.zhaiqianfeng.com/2017/06/learn-graphql-action-by-javascript.html"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>clickhouse学习笔记</title>
      <link href="2019/10/11/clickhouse/"/>
      <url>2019/10/11/clickhouse/</url>
      
        <content type="html"><![CDATA[<p>ClickHouse是一个用于联机分析(<strong>OLAP</strong>)的<strong>列式</strong>数据库管理系统(DBMS)。</p><h2 id="Clickhouse使用"><a href="#Clickhouse使用" class="headerlink" title="Clickhouse使用"></a>Clickhouse使用</h2><p><a href="https://clickhouse.yandex/">官网</a></p><p><a href="https://clickhouse.yandex/docs/zh/">官方文档</a></p><h3 id="入门-单机"><a href="#入门-单机" class="headerlink" title="入门(单机)"></a>入门(单机)</h3><p>使用docker部署</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull yandex/clickhouse-server:latest</span><br><span class="line">docker run -d -p 8123:8123 -p 9000:9000 -p 9009:9009 --name clickhouse yandex/clickhouse-server:latest</span><br></pre></td></tr></table></figure><blockquote><p>其他方式安装参考 <a href="https://clickhouse.yandex/docs/zh/getting_started/">部署运行</a></p></blockquote><ol><li>默认没有用户, 设置用户名密码参考 <code>/etc/clickhouse-server/users.xml</code> 做添加/修改</li><li>默认数据库 <code>default</code></li><li>自定义配置文件可以存放在 <code>/etc/clickhouse-server/config.d</code> 和 <code>/etc/clickhouse-server/users.d</code> 分别对应 系统配置/用户配置, 自动融合到主配置文件中</li></ol><h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><h4 id="多副本"><a href="#多副本" class="headerlink" title="多副本"></a>多副本</h4><p>在 <code>/etc/clickhouse-server/config.d</code> 下添加配置文件 <code>remote_servers.xml</code>, 例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">yandex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">remote_servers</span> <span class="attr">incl</span>=<span class="string">&quot;clickhouse_remote_servers&quot;</span> &gt;</span> <span class="comment">&lt;!--集群节点配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">test_clu</span>&gt;</span> <span class="comment">&lt;!-- 集群名称 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">shard</span>&gt;</span> <span class="comment">&lt;!-- 分片1 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">internal_replication</span>&gt;</span>false<span class="tag">&lt;/<span class="name">internal_replication</span>&gt;</span> <span class="comment">&lt;!-- 插入数据时,向所有副本插入数据 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">replica</span>&gt;</span> <span class="comment">&lt;!-- 副本1 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">default_database</span>&gt;</span>default<span class="tag">&lt;/<span class="name">default_database</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">host</span>&gt;</span>$&#123;host_name&#125;<span class="tag">&lt;/<span class="name">host</span>&gt;</span> <span class="comment">&lt;!--ip--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span>  <span class="comment">&lt;!--port--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">user</span>&gt;</span>default<span class="tag">&lt;/<span class="name">user</span>&gt;</span> <span class="comment">&lt;!-- 用户名密码.可选 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">replica</span>&gt;</span> <span class="comment">&lt;!-- 副本1 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">default_database</span>&gt;</span>default<span class="tag">&lt;/<span class="name">default_database</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">host</span>&gt;</span>$&#123;host_name&#125;<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">user</span>&gt;</span>default<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">test_clu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">remote_servers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">yandex</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="分布式-多副本-高可用-同步插入"><a href="#分布式-多副本-高可用-同步插入" class="headerlink" title="分布式+多副本+高可用 (同步插入)"></a>分布式+多副本+高可用 (同步插入)</h4><ol><li>在 <code>/etc/clickhouse-server/config.d</code> 下添加配置文件 <code>remote_servers.xml</code></li><li>在 <code>/etc/clickhouse-server/config.d</code> 下添加配置文件 <code>zookeeper.xml</code></li><li>所有机器都需要创建相同的 <code>副本表、分布式表</code></li><li>zookeeper 用与分布式协调</li><li>分片参数 <code>internal_replication</code> 必须设置为 true</li><li>marcos.xml <strong>每个副本都应该唯一</strong></li></ol><p>sql参考</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--  创建副本表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> default.c_user (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="string">`name`</span> Nullable(<span class="keyword">String</span>),</span><br><span class="line">    <span class="string">`sex`</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="string">`address`</span> Nullable(<span class="keyword">String</span>),</span><br><span class="line">    <span class="string">`datetime`</span> <span class="built_in">Date</span> <span class="keyword">DEFAULT</span> <span class="keyword">now</span>()</span><br><span class="line">) <span class="keyword">ENGINE</span> =MergeTree();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建分布式表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> default.user_all (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="string">`name`</span> Nullable(<span class="keyword">String</span>),</span><br><span class="line">    <span class="string">`sex`</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="string">`address`</span> Nullable(<span class="keyword">String</span>),</span><br><span class="line">    <span class="string">`datetime`</span> <span class="built_in">Date</span> <span class="keyword">DEFAULT</span> <span class="keyword">now</span>()</span><br><span class="line">) <span class="keyword">engine</span> = <span class="keyword">Distributed</span>(test_clu, <span class="string">&#x27;default&#x27;</span>, <span class="string">&#x27;c_user&#x27;</span>, <span class="keyword">rand</span>()); <span class="comment">-- 集群名称, 数据库, 副本表, 集群数据分配策略</span></span><br></pre></td></tr></table></figure><p><code>remote_servers.xml</code> 参考配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">yandex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">remote_servers</span> <span class="attr">incl</span>=<span class="string">&quot;clickhouse_remote_servers&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">test_clu</span>&gt;</span> <span class="comment">&lt;!-- 集群名称 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">shard</span>&gt;</span> <span class="comment">&lt;!-- 分片1 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">internal_replication</span>&gt;</span>true<span class="tag">&lt;/<span class="name">internal_replication</span>&gt;</span> <span class="comment">&lt;!-- 插入数据时,向所有副本插入数据 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">replica</span>&gt;</span> <span class="comment">&lt;!-- 副本1 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">default_database</span>&gt;</span>default<span class="tag">&lt;/<span class="name">default_database</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">host</span>&gt;</span>clickhouse_s1<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">user</span>&gt;</span>default<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">replica</span>&gt;</span> <span class="comment">&lt;!-- 副本2 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">default_database</span>&gt;</span>default<span class="tag">&lt;/<span class="name">default_database</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">host</span>&gt;</span>clickhouse_s3<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">user</span>&gt;</span>default<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">shard</span>&gt;</span> <span class="comment">&lt;!-- 分片2 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">internal_replication</span>&gt;</span>true<span class="tag">&lt;/<span class="name">internal_replication</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">replica</span>&gt;</span> <span class="comment">&lt;!-- 副本1 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">default_database</span>&gt;</span>default<span class="tag">&lt;/<span class="name">default_database</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">host</span>&gt;</span>clickhouse_s2<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">user</span>&gt;</span>default<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">replica</span>&gt;</span> <span class="comment">&lt;!-- 副本2 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">default_database</span>&gt;</span>default<span class="tag">&lt;/<span class="name">default_database</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">host</span>&gt;</span>clickhouse_s4<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">user</span>&gt;</span>default<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">test_clu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">remote_servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据压缩算法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">clickhouse_compression</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">case</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">min_part_size</span>&gt;</span>10000000000<span class="tag">&lt;/<span class="name">min_part_size</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">min_part_size_ratio</span>&gt;</span>0.01<span class="tag">&lt;/<span class="name">min_part_size_ratio</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">method</span>&gt;</span>lz4<span class="tag">&lt;/<span class="name">method</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">case</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">clickhouse_compression</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">yandex</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>zookeeper.xml</code> 参考配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">yandex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">zookeeper</span> <span class="attr">incl</span>=<span class="string">&quot;zookeeper-servers&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">node</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">host</span>&gt;</span>clickhouse_zk0<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 多节点配置</span></span><br><span class="line"><span class="comment">        &lt;node index=&quot;2&quot;&gt;</span></span><br><span class="line"><span class="comment">            &lt;host&gt;clickhouse_zk1&lt;/host&gt;</span></span><br><span class="line"><span class="comment">            &lt;port&gt;2181&lt;/port&gt;</span></span><br><span class="line"><span class="comment">        &lt;/node&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">zookeeper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">yandex</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="分布式-多副本-高可用-复制表"><a href="#分布式-多副本-高可用-复制表" class="headerlink" title="分布式+多副本+高可用 (复制表)"></a>分布式+多副本+高可用 (复制表)</h4><p>上面的基础上再在 <code>/etc/clickhouse-server/config.d</code> 下添加配置文件 <code>macros.xml</code></p><p>这个方式与上面<em>同步插入</em>的区别是 <em>插入数据时,只向一个副本插入,其他副本自动复制数据</em>, 我们需要将表引擎由<code>MergeTree</code>改为<code>ReplicatedMergeTree</code></p><p>参考sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--  创建副本表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> default.c_user (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="string">`name`</span> Nullable(<span class="keyword">String</span>),</span><br><span class="line">    <span class="string">`sex`</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="string">`address`</span> Nullable(<span class="keyword">String</span>),</span><br><span class="line">    <span class="string">`datetime`</span> <span class="built_in">Date</span> <span class="keyword">DEFAULT</span> <span class="keyword">now</span>()</span><br><span class="line">) <span class="keyword">ENGINE</span> =ReplicatedMergeTree(<span class="string">&#x27;/clickhouse/tables/&#123;shard&#125;/default/c_user&#x27;</span>, <span class="string">&#x27;&#123;replica&#125;&#x27;</span>,<span class="string">`datetime`</span> ,(<span class="string">`datetime`</span>,<span class="string">`id`</span>),<span class="number">8192</span>);</span><br><span class="line"><span class="comment">-- &#123;shard&#125; 会自动从 macros.xml 中获取配置</span></span><br><span class="line"><span class="comment">-- &#123;replica&#125; 会自动从 macros.xml 中获取配置</span></span><br><span class="line"><span class="comment">-- `datetime` 是时间类型的字段</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建分布式表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> default.user_all (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="string">`name`</span> Nullable(<span class="keyword">String</span>),</span><br><span class="line">    <span class="string">`sex`</span> <span class="built_in">int</span>,</span><br><span class="line">    <span class="string">`address`</span> Nullable(<span class="keyword">String</span>),</span><br><span class="line">    <span class="string">`datetime`</span> <span class="built_in">Date</span> <span class="keyword">DEFAULT</span> <span class="keyword">now</span>()</span><br><span class="line">) <span class="keyword">engine</span> = <span class="keyword">Distributed</span>(test_clu, <span class="string">&#x27;default&#x27;</span>, <span class="string">&#x27;c_user&#x27;</span>, <span class="keyword">rand</span>());</span><br></pre></td></tr></table></figure><p>marcos.xml 参考配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">yandex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">macros</span> <span class="attr">replace</span>=<span class="string">&quot;replace&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shard</span>&gt;</span>SHARD_NAME<span class="tag">&lt;/<span class="name">shard</span>&gt;</span> <span class="comment">&lt;!--集群ID--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">replica</span>&gt;</span>REPLICA_NAME<span class="tag">&lt;/<span class="name">replica</span>&gt;</span> <span class="comment">&lt;!--副本ID--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">macros</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">yandex</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>每个副本都应该唯一</strong></p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>clickhouse用于大数据查询, 占用空间少, 查询速度快</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cron表达式</title>
      <link href="2019/07/17/cron/"/>
      <url>2019/07/17/cron/</url>
      
        <content type="html"><![CDATA[<p>cron表达式常用于调度任务</p><p>本文摘自:<a href="https://www.cnblogs.com/javahr/p/8318728.html">cron表达式详解</a></p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>corn从左到右（用空格隔开）：秒 分 小时 日期 月份 星期 [年份]</p><h2 id="各字段的含义"><a href="#各字段的含义" class="headerlink" title="各字段的含义"></a>各字段的含义</h2><table><thead><tr><th align="center">字段</th><th align="center">允许值</th><th align="center">允许的特殊字符</th></tr></thead><tbody><tr><td align="center">秒（Seconds）</td><td align="center">0~59的整数</td><td align="center">, - * /    四个字符</td></tr><tr><td align="center">分（Minutes）</td><td align="center">0~59的整数</td><td align="center">, - * /    四个字符</td></tr><tr><td align="center">小时（Hours）</td><td align="center">0~23的整数</td><td align="center">, - * /    四个字符</td></tr><tr><td align="center">日期（DayofMonth）</td><td align="center">1~31的整数（但是你需要考虑你月的天数）</td><td align="center">,- * ? / L W C     八个字符</td></tr><tr><td align="center">月份（Month）</td><td align="center">1~12的整数或者 JAN-DEC</td><td align="center">, - * /    四个字符</td></tr><tr><td align="center">星期（DayofWeek）</td><td align="center">1~7的整数或者 SUN-SAT （1=SUN）</td><td align="center">, - * ? / L C #     八个字符</td></tr><tr><td align="center">年(可选，留空)（Year）</td><td align="center">1970~2099</td><td align="center">, - * /    四个字符</td></tr></tbody></table><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是:</p><ol><li><em>：表示匹配该域的任意值。假如在Minutes域使用</em>, 即表示每分钟都会触发事件。</li><li>?：只能用在DayofMonth和DayofWeek两个域。它也匹配域的任意值，但实际不会。因为DayofMonth和DayofWeek会相互影响。例如想在每月的20日触发调度，不管20日到底是星期几，则只能使用如下写法： 13 13 15 20 * ?, 其中最后一位只能用？，而不能使用<em>，如果使用</em>表示不管星期几都会触发，实际上并不是这样。</li><li>-：表示范围。例如在Minutes域使用5-20，表示从5分到20分钟每分钟触发一次</li><li>/：表示起始时间开始触发，然后每隔固定时间触发一次。例如在Minutes域使用5/20,则意味着从5分开始每20分钟触发一次</li><li>,：表示列出枚举值。例如：在Minutes域使用5,20，则意味着在5和20分每分钟触发一次。</li><li>L：表示最后，只能出现在DayofWeek和DayofMonth域。如果在DayofWeek域使用5L,意味着在最后的一个星期四触发。</li><li>W:表示有效工作日(周一到周五),只能出现在DayofMonth域，系统将在离指定日期的最近的有效工作日触发事件。例如：在 DayofMonth使用5W，如果5日是星期六，则将在最近的工作日：星期五，即4日触发。如果5日是星期天，则在6日(周一)触发；如果5日在星期一到星期五中的一天，则就在5日触发。另外一点，W的最近寻找不会跨过月份 。</li><li>LW:这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。</li><li>#:用于确定每个月第几个星期几，只能出现在DayofMonth域。例如在4#2，表示某月的第二个星期三。</li></ol><h2 id="常用表达式例子"><a href="#常用表达式例子" class="headerlink" title="常用表达式例子"></a>常用表达式例子</h2><ol><li>0 0 2 1 * ? *   表示在每月的1日的凌晨2点调整任务</li><li>0 15 10 ? * MON-FRI   表示周一到周五每天上午10:15执行作业</li><li>0 15 10 ? 6L 2002-2006   表示2002-2006年的每个月的最后一个星期五上午10:15执行作</li><li>0 0 10,14,16 * * ?   每天上午10点，下午2点，4点</li><li>0 0/30 9-17 * * ?   朝九晚五工作时间内每半小时</li><li>0 0 12 ? * WED    表示每个星期三中午12点</li><li>0 0 12 * * ?   每天中午12点触发</li><li>0 15 10 ? * *    每天上午10:15触发</li><li>0 15 10 * * ?     每天上午10:15触发</li><li>0 15 10 * * ? *    每天上午10:15触发</li><li>0 15 10 * * ? 2005    2005年的每天上午10:15触发</li><li>0 * 14 * * ?     在每天下午2点到下午2:59期间的每1分钟触发</li><li>0 0/5 14 * * ?    在每天下午2点到下午2:55期间的每5分钟触发</li><li>0 0/5 14,18 * * ?     在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</li><li>0 0-5 14 * * ?    在每天下午2点到下午2:05期间的每1分钟触发</li><li>0 10,44 14 ? 3 WED    每年三月的星期三的下午2:10和2:44触发</li><li>0 15 10 ? * MON-FRI    周一至周五的上午10:15触发</li><li>0 15 10 15 * ?    每月15日上午10:15触发</li><li>0 15 10 L * ?    每月最后一日的上午10:15触发</li><li>0 15 10 ? * 6L    每月的最后一个星期五上午10:15触发</li><li>0 15 10 ? * 6L 2002-2005   2002年至2005年的每月的最后一个星期五上午10:15触发</li><li>0 15 10 ? * 6#3   每月的第三个星期五上午10:15触发</li></ol><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>有些子表达式能包含一些范围或列表</p><p>例如：子表达式（天（星期））可以为 “MON-FRI”，“MON，WED，FRI”，“MON-WED,SAT”</p><p>“*”字符代表所有可能的值</p><p>因此，“<em>”在子表达式（月）里表示每个月的含义，“</em>”在子表达式（天（星期））表示星期的每一天</p><p>“/”字符用来指定数值的增量<br>例如：在子表达式（分钟）里的“0/15”表示从第0分钟开始，每15分钟<br>在子表达式（分钟）里的“3/20”表示从第3分钟开始，每20分钟（它和“3，23，43”）的含义一样</p><p>“？”字符仅被用于天（月）和天（星期）两个子表达式，表示不指定值<br>当2个子表达式其中之一被指定了值以后，为了避免冲突，需要将另一个子表达式的值设为“？”</p><p>“L” 字符仅被用于天（月）和天（星期）两个子表达式，它是单词“last”的缩写<br>但是它在两个子表达式里的含义是不同的。<br>在天（月）子表达式中，“L”表示一个月的最后一天<br>在天（星期）自表达式中，“L”表示一个星期的最后一天，也就是SAT</p><p>如果在“L”前有具体的内容，它就具有其他的含义了</p><p>例如：“6L”表示这个月的倒数第６天，“FRIL”表示这个月的最一个星期五<br>注意：在使用“L”参数时，不要指定列表或范围，因为这会导致问题</p>]]></content>
      
      
      
        <tags>
            
            <tag> cron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="2019/07/17/regular/"/>
      <url>2019/07/17/regular/</url>
      
        <content type="html"><![CDATA[<p>学习正则表达式</p><p><a href="https://deerchao.net/tutorials/regex/regex.htm">正则表达式30分钟入门教程</a></p><p><a href="https://github.com/jackfrued/Python-100-Days">Python - 100天从新手到大师</a></p><h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><table><thead><tr><th align="center">符号</th><th align="center">解释</th><th align="center">示例</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">.</td><td align="center">匹配任意字符</td><td align="center">b.t</td><td align="center">可以匹配bat / but / b#t / b1t等</td></tr><tr><td align="center">\w</td><td align="center">匹配字母/数字/下划线</td><td align="center">b\wt</td><td align="center">可以匹配bat / b1t / b_t等但不能匹配b#t</td></tr><tr><td align="center">\s</td><td align="center">匹配空白字符（包括\r、\n、\t等）</td><td align="center">love\syou</td><td align="center">可以匹配love you</td></tr><tr><td align="center">\d</td><td align="center">匹配数字</td><td align="center">\d\d</td><td align="center">可以匹配01 / 23 / 99等</td></tr><tr><td align="center">\b</td><td align="center">匹配单词的边界</td><td align="center">\bThe\b</td><td align="center"></td></tr><tr><td align="center">^</td><td align="center">匹配字符串的开始</td><td align="center">^The</td><td align="center">可以匹配The开头的字符串</td></tr><tr><td align="center">$</td><td align="center">匹配字符串的结束</td><td align="center">.exe$</td><td align="center">可以匹配.exe结尾的字符串</td></tr><tr><td align="center">\W</td><td align="center">匹配非字母/数字/下划线</td><td align="center">b\Wt</td><td align="center">可以匹配b#t / b@t等但不能匹配but / b1t / b_t等</td></tr><tr><td align="center">\S</td><td align="center">匹配非空白字符</td><td align="center">love\Syou</td><td align="center">可以匹配love#you等但不能匹配love you</td></tr><tr><td align="center">\D</td><td align="center">匹配非数字</td><td align="center">\d\D</td><td align="center">可以匹配9a / 3# / 0F等</td></tr><tr><td align="center">\B</td><td align="center">匹配非单词边界</td><td align="center">\Bio\B</td><td align="center"></td></tr><tr><td align="center">[]</td><td align="center">匹配来自字符集的任意单一字符</td><td align="center">[aeiou]</td><td align="center">可以匹配任一元音字母字符</td></tr><tr><td align="center">[^]</td><td align="center">匹配不在字符集中的任意单一字符</td><td align="center">[^aeiou]</td><td align="center">可以匹配任一非元音字母字符</td></tr><tr><td align="center">*</td><td align="center">匹配0次或多次</td><td align="center">\w*</td><td align="center"></td></tr><tr><td align="center">+</td><td align="center">匹配1次或多次</td><td align="center">\w+</td><td align="center"></td></tr><tr><td align="center">?</td><td align="center">匹配0次或1次</td><td align="center">\w?</td><td align="center"></td></tr><tr><td align="center">{N}</td><td align="center">匹配N次</td><td align="center">\w{3}</td><td align="center"></td></tr><tr><td align="center">{M,}</td><td align="center">匹配至少M次</td><td align="center">\w{3,}</td><td align="center"></td></tr><tr><td align="center">{M,N}</td><td align="center">匹配至少M次至多N次</td><td align="center">\w{3,6}</td><td align="center"></td></tr><tr><td align="center">|</td><td align="center">分支</td><td align="center">foo</td><td align="center">bar</td></tr><tr><td align="center">(?#)</td><td align="center">注释</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">(exp)</td><td align="center">匹配exp并捕获到自动命名的组中</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">(?<name>exp)</td><td align="center">匹配exp并捕获到名为name的组中</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">(?:exp)</td><td align="center">匹配exp但是不捕获匹配的文本</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">(?=exp)</td><td align="center">匹配exp前面的位置</td><td align="center">\b\w+(?=ing)</td><td align="center">可以匹配I’m dancing中的danc</td></tr><tr><td align="center">(?&lt;=exp)</td><td align="center">匹配exp后面的位置</td><td align="center">(?&lt;=\bdanc)\w+\b</td><td align="center">可以匹配I love dancing and reading中的第一个ing</td></tr><tr><td align="center">(?!exp)</td><td align="center">匹配后面不是exp的位置</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">(?&lt;!exp)</td><td align="center">匹配前面不是exp的位置</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">*?</td><td align="center">重复任意次，但尽可能少重复</td><td align="center">a.*b</td><td align="center"></td></tr><tr><td align="center">a.*?b</td><td align="center">将正则表达式应用于aabab，前者会匹配整个字符串aabab，后者会匹配aab和ab两个字符串</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">+?</td><td align="center">重复1次或多次，但尽可能少重复</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">??</td><td align="center">重复0次或1次，但尽可能少重复</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">{M,N}?</td><td align="center">重复M到N次，但尽可能少重复</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">{M,}?</td><td align="center">重复M次以上，但尽可能少重复</td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python3 学习</title>
      <link href="2019/07/04/python3/"/>
      <url>2019/07/04/python3/</url>
      
        <content type="html"><![CDATA[<p>本篇博客学习总结于<a href="https://github.com/jackfrued/Python-100-Days">Python - 100天从新手到大师</a></p><h2 id="Python是一个“优雅”、“明确”、“简单”的编程语言"><a href="#Python是一个“优雅”、“明确”、“简单”的编程语言" class="headerlink" title="Python是一个“优雅”、“明确”、“简单”的编程语言"></a>Python是一个“优雅”、“明确”、“简单”的编程语言</h2><p>给初学者的建议:</p><ol><li>Make English as your working language.</li><li>Practice makes perfect.</li><li>All experience comes from mistakes.</li><li>Don’t be one of the leeches.</li><li>Either stand out or kicked out.</li></ol><h2 id="Python基础数据类型"><a href="#Python基础数据类型" class="headerlink" title="Python基础数据类型"></a>Python基础数据类型</h2><ol><li>整数</li><li>字符串</li><li>浮点数</li><li>True/False</li><li>None</li></ol><h2 id="Python数据结构"><a href="#Python数据结构" class="headerlink" title="Python数据结构"></a>Python数据结构</h2><ol><li>List（列表）: 数组</li><li>Tuple（元组）: 不可修改列表</li><li>Set（集合）: 同数学中的集合, 不可重复, 可以技术 交集、并集、差集等运算</li><li>Dictionary（字典）: 每一个元素都是由 “键值对” 组成</li></ol><h2 id="字符串格式化代码"><a href="#字符串格式化代码" class="headerlink" title="字符串格式化代码"></a>字符串格式化代码</h2><table><thead><tr><th align="center">参数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">%%</td><td align="center">百分号标记</td></tr><tr><td align="center">%c</td><td align="center">字符及其ASCII码</td></tr><tr><td align="center">%s</td><td align="center">字符串</td></tr><tr><td align="center">%d</td><td align="center">有符号整数(十进制)</td></tr><tr><td align="center">%u</td><td align="center">无符号整数(十进制)</td></tr><tr><td align="center">%o</td><td align="center">无符号整数(八进制)</td></tr><tr><td align="center">%x</td><td align="center">无符号整数(十六进制)</td></tr><tr><td align="center">%X</td><td align="center">无符号整数(十六进制大写字符)</td></tr><tr><td align="center">%e</td><td align="center">浮点数字(科学计数法)</td></tr><tr><td align="center">%E</td><td align="center">浮点数字(科学计数法，用E代替e)</td></tr><tr><td align="center">%f</td><td align="center">浮点数字(用小数点符号)</td></tr><tr><td align="center">%g</td><td align="center">浮点数字(根据值的大小采用%e或%f)</td></tr><tr><td align="center">%G</td><td align="center">浮点数字(类似于%g)</td></tr><tr><td align="center">%p</td><td align="center">指针(用十六进制打印值的内存地址)</td></tr><tr><td align="center">%n</td><td align="center">存储输出字符的数量放进参数列表的下一个变量中</td></tr></tbody></table><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加 - 两个对象相加</td><td align="center">a + b 输出结果 31</td></tr><tr><td align="center">-</td><td align="center">减 - 得到负数或是一个数减去另一个数</td><td align="center">a - b 输出结果 -11</td></tr><tr><td align="center">*</td><td align="center">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td><td align="center">a * b 输出结果 210</td></tr><tr><td align="center">/</td><td align="center">除 - x 除以 y</td><td align="center">b / a 输出结果 2.1</td></tr><tr><td align="center">%</td><td align="center">取模 - 返回除法的余数</td><td align="center">b % a 输出结果 1</td></tr><tr><td align="center">**</td><td align="center">幂 - 返回x的y次幂</td><td align="center">a**b 为10的21次方</td></tr><tr><td align="center">//</td><td align="center">取整除 - 向下取接近除数的整数</td><td align="center">9//2 = 4; -9//2 = -5</td></tr></tbody></table><h2 id="特殊运算符"><a href="#特殊运算符" class="headerlink" title="特殊运算符"></a>特殊运算符</h2><table><thead><tr><th align="center">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">在set求交集的时候,同set1.intersection(set2)</td></tr><tr><td align="center">|</td><td align="center">在set求并集的时候,同set1.union(set2)</td></tr><tr><td align="center">-</td><td align="center">在set求差集的时候,同set1.difference(set2)</td></tr><tr><td align="center">^</td><td align="center">在set求对称差的时候,同set1.symmetric_difference(set2)</td></tr></tbody></table><h2 id="文件操作符"><a href="#文件操作符" class="headerlink" title="文件操作符"></a>文件操作符</h2><h3 id="python内置的-open-函数"><a href="#python内置的-open-函数" class="headerlink" title="python内置的 open 函数"></a>python内置的 <code>open</code> 函数</h3><table><thead><tr><th align="center">操作模式</th><th align="center">具体含义</th></tr></thead><tbody><tr><td align="center">‘r’</td><td align="center">读取 （默认）</td></tr><tr><td align="center">‘w’</td><td align="center">写入（会先截断之前的内容）</td></tr><tr><td align="center">‘x’</td><td align="center">写入，如果文件已经存在会产生异常</td></tr><tr><td align="center">‘a’</td><td align="center">追加，将内容写入到已有文件的末尾</td></tr><tr><td align="center">‘b’</td><td align="center">二进制模式</td></tr><tr><td align="center">‘t’</td><td align="center">文本模式（默认）</td></tr><tr><td align="center">‘+’</td><td align="center">更新（既可以读又可以写）</td></tr></tbody></table><h3 id="python的JSON模块"><a href="#python的JSON模块" class="headerlink" title="python的JSON模块"></a>python的<code>JSON</code>模块</h3><p>常用的四个函数</p><ul><li>dump - 将Python对象按照JSON格式序列化到文件中</li><li>dumps - 将Python对象处理成JSON格式的字符串</li><li>load - 将文件中的JSON数据反序列化成对象</li><li>loads - 将字符串的内容反序列化成Python对象</li></ul><p>这里出现了两个概念，一个叫序列化，一个叫反序列化。自由的百科全书维基百科上对这两个概念是这样解释的：“序列化（serialization）在计算机科学的数据处理中，是指将数据结构或对象状态转换为可以存储或传输的形式，这样在需要的时候能够恢复到原先的状态，而且通过序列化的数据重新获取字节时，可以利用这些字节来产生原始对象的副本（拷贝）。与这个过程相反的动作，即从一系列字节中提取数据结构的操作，就是反序列化（deserialization）”。</p><h3 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">文件操作和异常处理及JSON数据</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;读取文件&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        fs = open(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        print(fs.read())</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        print(<span class="string">&#x27;文件不存在&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> fs:</span><br><span class="line">            fs.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writh</span>(<span class="params">cmd=<span class="string">&#x27;w&#x27;</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;写文件&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        txt = (x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">600</span>, <span class="number">1000</span>))</span><br><span class="line">        fs = open(<span class="string">&#x27;b.txt&#x27;</span>, cmd, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> txt:</span><br><span class="line">            fs.write(str(t) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> IOError:</span><br><span class="line">        print(<span class="string">&#x27;IO异常&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> fs:</span><br><span class="line">            fs.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">with_def</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用with关键字,指定文件对象的上下文环境并在离开上下文环境时自动释放文件资源</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;一次读取所有文件&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">&#x27;a.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">            print(f1.read())</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;&quot;&quot;使用for-in逐行读取&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">&#x27;a.txt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>, mode=<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f2:</span><br><span class="line">                print(line, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        print(<span class="string">&#x27;错误&#x27;</span>, Exception)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buffer_file_def</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;读取二进制文件(拷贝图片)&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;复制文件&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">&#x27;/Users/aolei/Pictures/my images/32916897.jpg&#x27;</span>, mode=<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line">            print(data)</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;&quot;&quot;粘贴到当前目录下&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">&#x27;head.jpg&#x27;</span>, mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(data)</span><br><span class="line">            print(<span class="string">&#x27;Copy Success&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError :</span><br><span class="line">        print(<span class="string">&#x27;文件不存在&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> UnicodeEncodeError:</span><br><span class="line">        print(<span class="string">&#x27;编码异常&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_data_def</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;python对json数据的处理&quot;&quot;&quot;</span></span><br><span class="line">    myuser = &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;李黑&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&#x27;qq&#x27;</span>: <span class="number">957658</span>,</span><br><span class="line">        <span class="string">&#x27;friends&#x27;</span>: [<span class="string">&#x27;王大锤&#x27;</span>, <span class="string">&#x27;白元芳&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;cars&#x27;</span>: [</span><br><span class="line">            &#123;<span class="string">&#x27;brand&#x27;</span>: <span class="string">&#x27;BYD&#x27;</span>, <span class="string">&#x27;max_speed&#x27;</span>: <span class="number">180</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;brand&#x27;</span>: <span class="string">&#x27;Audi&#x27;</span>, <span class="string">&#x27;max_speed&#x27;</span>: <span class="number">280</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;brand&#x27;</span>: <span class="string">&#x27;Benz&#x27;</span>, <span class="string">&#x27;max_speed&#x27;</span>: <span class="number">320</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;将python字典对象序列化为json文件&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">&#x27;users.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            json.dump(myuser, f)</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;&quot;&quot;将json文件反序列化为python字典对象&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">&#x27;users.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding = <span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            curr_user = json.load(f)</span><br><span class="line">            print(curr_user)</span><br><span class="line">    <span class="keyword">except</span> IOError:</span><br><span class="line">        print(<span class="string">&#x27;文件写入失败&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># read()</span></span><br><span class="line">    <span class="comment"># writh(&#x27;a&#x27;)</span></span><br><span class="line">    <span class="comment"># with_def()</span></span><br><span class="line">    <span class="comment"># buffer_file_def()</span></span><br><span class="line">    json_data_def()</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://segmentfault.com/a/1190000007736783" title="思否 - 总结：Python中的异常处理">《总结：Python中的异常处理》</a></p><p><a href="http://www.ruanyifeng.com/blog/2016/08/http.html" title="阮一峰HTTP协议入门">HTTP协议入门</a></p><p><a href="https://www.juhe.cn/" title="聚合数据">聚合数据</a></p><p><a href="https://www.avatardata.cn/" title="阿凡达数据">阿凡达数据</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote><p>Don’t be one of the leeches.</p></blockquote><p><img src="./1.png" alt=" "></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell学习笔记</title>
      <link href="2019/06/18/shell/"/>
      <url>2019/06/18/shell/</url>
      
        <content type="html"><![CDATA[<p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁</p><p>Shell 编程跟 java、php 编程一样，只要有一个能编写代码¸的文本编辑器和一个能解释执行的脚本解释器就可以了。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="创建脚本文件"><a href="#创建脚本文件" class="headerlink" title="创建脚本文件"></a>创建脚本文件</h3><p>新建一个扩展名为<code>.sh</code>的文件<code>test.sh</code>, sh代表<em>shell</em></p><p>test.sh文件内容如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello Shell&quot;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>#!</code> 是一个约定俗成的标记, 用于告诉系统使用哪个解释器来执行这个脚本.<br><code>echo</code> 命令是用于向终端输出文本信息,也可用于向文件中写入数据</p></blockquote><h3 id="运行shell脚本"><a href="#运行shell脚本" class="headerlink" title="运行shell脚本"></a>运行shell脚本</h3><p>运行shell脚本的方式两种</p><ul><li>通过可执行文件运行</li></ul><p>需要给脚本文件添加可执行权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 test.sh 文件所在的文件夹下, 执行以下命令</span></span><br><span class="line">chmod +x ./test.sh</span><br></pre></td></tr></table></figure><blockquote><p>这里需要注意的是, 一定要写成<code>./test.sh</code>而不是<code>test.sh</code>, 否责系统可能会找不到脚本文件, <code>./</code>的意思是 指定在当前文件路径下查找文件</p></blockquote><ul><li>作为解释器参数</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh test.sh</span><br><span class="line">/bin/php test.php</span><br></pre></td></tr></table></figure><blockquote><p>这种方式下,在文件第一行添加<em>标记</em>也没有效果(因为你已经指定了解释器来运行脚本)</p></blockquote><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>规则:</p><ol><li>定义变量时，变量名不加美元符号</li><li>变量名和等号之间不能有空格</li><li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</li><li>中间不能有空格，可以使用下划线（_）。</li><li>不能使用标点符号。</li><li>不能使用bash里的关键字（可用help命令查看保留关键字）。</li></ol><p>示例:</p><p>有效命名:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RUNOOB</span><br><span class="line">LD_LIBRARY_PATH</span><br><span class="line">_var</span><br><span class="line">var2</span><br></pre></td></tr></table></figure><p>无效命名:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?var=123</span><br><span class="line">user*name=runoob</span><br></pre></td></tr></table></figure><p>显示赋值</p><p><code>your_name=&quot;runoob.com&quot;</code></p><p>通过语句赋值</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `ls /etc`</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> $(ls /etc)</span><br></pre></td></tr></table></figure><blockquote><p>以上语句, 列出<code>/etc</code>路径下的所有文件名,赋值给<code>file</code></p></blockquote><h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3><p>使用变量,只需要在变量前面加一个<code>$</code>符号</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">&quot;shell&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name&#125;</span></span><br></pre></td></tr></table></figure><p><code>$name</code>和<code>$&#123;name&#125;</code>都是可以的, <code>&#123;&#125;</code>是可选的, 它的作用是帮助解释器来识别变量边界的, 比如:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> skill <span class="keyword">in</span> Ada Coffe Action Java; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;I am good at <span class="variable">$&#123;skill&#125;</span>Script&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>如果不加 <code>&#123;&#125;</code> 则解释器认为<code>$skillScript</code>是一个变量(内容为空),</p><blockquote><blockquote><p>推荐给所有的变量加上<code>&#123;&#125;</code>,养成好的编程习惯</p></blockquote></blockquote><h3 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h3><p>已经定义的变量可以被重新赋值, <strong>只读变量</strong>除外</p><p>定义方式为: 在变量前面加上 <code>readonly</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">readonly</span> name=<span class="string">&quot;Shell&quot;</span></span><br><span class="line">name=<span class="string">&quot;jason&quot;</span> <span class="comment"># 这里会报错  error: NAME: This variable is read only.</span></span><br></pre></td></tr></table></figure><h3 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unset</span> name</span><br></pre></td></tr></table></figure><blockquote><p>unset 命令不能删除只读变量。 删除之后不能使用</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.runoob.com/linux/linux-shell.html" title="Linux Shell教程">菜鸟教程</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>学习一门技术, 开始的时候不要纠结各种看不懂的语法、不钻牛角尖, 先培养兴趣, 再循序渐进.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 脚本语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql学习笔记</title>
      <link href="2019/06/05/mysql5-7/"/>
      <url>2019/06/05/mysql5-7/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要是我日常使用mysql的一些记录<br>我使用的mysql版本是:<code>5.7</code></p><h2 id="MySQL-相关文章"><a href="#MySQL-相关文章" class="headerlink" title="MySQL 相关文章"></a>MySQL 相关文章</h2><p><a href="https://cloud.tencent.com/developer/news/456119">【链接】大牛总结的MySQL锁优化，写得太好了！</a><br><a href="https://mp.weixin.qq.com/s/p32Tc6XhbHq_NbJWAiZnhQ">【链接】一篇文章弄懂MySQL的事务隔离级别</a></p><h2 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h2><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user <span class="string">&#x27;testuser&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure><p>创建 <code>testuser</code> 用户, 可以在所有主机上登陆使用, 密码为<code>password</code>;</p><ol><li>testuser 是创建的用户名</li><li>% 是主机名,指定哪些主机可以使用改用户<ol><li>%/0.0.0.0 所有主机可以使用</li><li>localhost/127.0.0.1 本机可以使用</li><li>…</li></ol></li><li>password 是创建的用户登陆密码, 如果指定为 <code>identified by &#39;&#39;</code> 则不设置密码</li></ol><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop user <span class="string">&#x27;apollo&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h3><h4 id="授予权限"><a href="#授予权限" class="headerlink" title="授予权限"></a>授予权限</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grant all on testdb.* to <span class="string">&#x27;testuser&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">grant select on testdb.* to <span class="string">&#x27;testuser&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">grant insert on testdb.* to <span class="string">&#x27;testuser&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>授予用户<code>testuser</code>在所有主机上使用<code>testdb</code>数据库下<strong>所有表</strong>的权限</p><ul><li>all 代表权限<ul><li>select 查询权限</li><li>insert 插入权限</li><li>delete 删除权限</li><li>update 修改权限</li></ul></li><li>testdb.* 改数据库下的所有表</li><li>‘testuser’@’%’ 表示<code>testuser</code>在<code>%</code>主机可以使用授予的权限</li></ul><h4 id="刷新权限"><a href="#刷新权限" class="headerlink" title="刷新权限"></a>刷新权限</h4><p><code>flush privileges;</code></p><h4 id="删除权限"><a href="#删除权限" class="headerlink" title="删除权限"></a>删除权限</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REVOKE ALL ON <span class="built_in">test</span>.* FROM <span class="string">&#x27;testuser&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">REVOKE select ON <span class="built_in">test</span>.* FROM <span class="string">&#x27;testuser&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">REVOKE insert ON <span class="built_in">test</span>.* FROM <span class="string">&#x27;testuser&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>删除所有权限</li><li>删除查询权限</li><li>删除插入权限</li></ul><h4 id="查看用户权限"><a href="#查看用户权限" class="headerlink" title="查看用户权限"></a>查看用户权限</h4><p><code>SHOW GRANTS FOR &#39;testuser&#39;@&#39;%&#39;;</code></p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><h5 id="类型转换函数"><a href="#类型转换函数" class="headerlink" title="类型转换函数"></a>类型转换函数</h5><p>用于类型转化 CAST()和CONVERT()</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CAST(value as <span class="built_in">type</span>);</span><br><span class="line">CONVERT(value, <span class="built_in">type</span>);</span><br></pre></td></tr></table></figure><p>可以转换的类型是有限制的。这个类型可以是以下值其中的一个：</p><ul><li>二进制，同带binary前缀的效果 : BINARY</li><li>字符型，可带参数 : CHAR()</li><li>日期 : DATE</li><li>时间: TIME</li><li>日期时间型 : DATETIME</li><li>浮点数 : DECIMAL</li><li>整数 : SIGNED</li><li>无符号整数 : UNSIGNED</li></ul><p>示例:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1</span></span><br><span class="line">mysql&gt; SELECT CONVERT(<span class="string">&#x27;23&#x27;</span>,SIGNED);</span><br><span class="line">+----------------------+</span><br><span class="line">| CONVERT(<span class="string">&#x27;23&#x27;</span>,SIGNED) |</span><br><span class="line">+----------------------+</span><br><span class="line">|                   23 |</span><br><span class="line">+----------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line">mysql&gt; SELECT CAST(<span class="string">&#x27;125e342.83&#x27;</span> AS signed);</span><br><span class="line">+------------------------------+</span><br><span class="line">| CAST(<span class="string">&#x27;125e342.83&#x27;</span> AS signed) |</span><br><span class="line">+------------------------------+</span><br><span class="line">|                          125 |</span><br><span class="line">+------------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line">mysql&gt; SELECT CAST(<span class="string">&#x27;3.35&#x27;</span> AS signed);</span><br><span class="line">+------------------------+</span><br><span class="line">| CAST(<span class="string">&#x27;3.35&#x27;</span> AS signed) |</span><br><span class="line">+------------------------+</span><br><span class="line">|                      3 |</span><br><span class="line">+------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span></span><br></pre></td></tr></table></figure><h5 id="格式化函数"><a href="#格式化函数" class="headerlink" title="格式化函数"></a>格式化函数</h5><h5 id="随机数-rand"><a href="#随机数-rand" class="headerlink" title="随机数 rand()"></a>随机数 rand()</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select rand()</span><br></pre></td></tr></table></figure><h4 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h4><h5 id="获取系统时间-now-和-sysdate-这两个函数的区别是-now-在执行前就确认了值-sysdate-在执行时动态确认值"><a href="#获取系统时间-now-和-sysdate-这两个函数的区别是-now-在执行前就确认了值-sysdate-在执行时动态确认值" class="headerlink" title="获取系统时间 now() 和 sysdate() 这两个函数的区别是, now()在执行前就确认了值, sysdate()在执行时动态确认值"></a>获取系统时间 <code>now()</code> 和 <code>sysdate()</code> 这两个函数的区别是, <code>now()</code>在执行前就确认了值, <code>sysdate()</code>在执行时动态确认值</h5><p>例子:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; select now(), sleep(3), now();</span><br><span class="line">&gt; select sysdate(), sleep(3), sysdate();</span><br></pre></td></tr></table></figure><blockquote><p>感兴趣的可以看一下这两天sql执行的结果</p></blockquote><h5 id="获得当前时间戳函数：current-timestamp-current-timestamp"><a href="#获得当前时间戳函数：current-timestamp-current-timestamp" class="headerlink" title="获得当前时间戳函数：current_timestamp, current_timestamp()"></a>获得当前时间戳函数：current_timestamp, current_timestamp()</h5><p>语法: <code>select current_timestamp, current_timestamp()</code></p><h5 id="日期、时间转换"><a href="#日期、时间转换" class="headerlink" title="日期、时间转换"></a>日期、时间转换</h5><p>时间转换为字符串 date_format(date,format), time_format(time,format)</p><p>时间格式化函数 DATE_FORMAT(date, format)</p><ol><li>date 时间</li><li>format 参数格式有</li></ol><table><thead><tr><th align="center">参数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">%a</td><td align="center">缩写星期名</td></tr><tr><td align="center">%b</td><td align="center">缩写月名</td></tr><tr><td align="center">%c</td><td align="center">月，数值</td></tr><tr><td align="center">%D</td><td align="center">带有英文前缀的月中的天</td></tr><tr><td align="center">%d</td><td align="center">月的天，数值(00-31)</td></tr><tr><td align="center">%e</td><td align="center">月的天，数值(0-31)</td></tr><tr><td align="center">%f</td><td align="center">微秒</td></tr><tr><td align="center">%H</td><td align="center">小时 (00-23)</td></tr><tr><td align="center">%h</td><td align="center">小时 (01-12)</td></tr><tr><td align="center">%I</td><td align="center">小时 (01-12)</td></tr><tr><td align="center">%i</td><td align="center">分钟，数值(00-59)</td></tr><tr><td align="center">%j</td><td align="center">年的天 (001-366)</td></tr><tr><td align="center">%k</td><td align="center">小时 (0-23)</td></tr><tr><td align="center">%l</td><td align="center">小时 (1-12)</td></tr><tr><td align="center">%M</td><td align="center">月名</td></tr><tr><td align="center">%m</td><td align="center">月，数值(00-12)</td></tr><tr><td align="center">%p</td><td align="center">AM 或 PM</td></tr><tr><td align="center">%r</td><td align="center">时间，12-小时（hh:mm:ss AM 或 PM）</td></tr><tr><td align="center">%S</td><td align="center">秒(00-59)</td></tr><tr><td align="center">%s</td><td align="center">秒(00-59)</td></tr><tr><td align="center">%T</td><td align="center">时间, 24-小时 (hh:mm:ss)</td></tr><tr><td align="center">%U</td><td align="center">周 (00-53) 星期日是一周的第一天</td></tr><tr><td align="center">%u</td><td align="center">周 (00-53) 星期一是一周的第一天</td></tr><tr><td align="center">%V</td><td align="center">周 (01-53) 星期日是一周的第一天，与 %X 使用</td></tr><tr><td align="center">%v</td><td align="center">周 (01-53) 星期一是一周的第一天，与 %x 使用</td></tr><tr><td align="center">%W</td><td align="center">星期名</td></tr><tr><td align="center">%w</td><td align="center">周的天 （0=星期日, 6=星期六）</td></tr><tr><td align="center">%X</td><td align="center">年，其中的星期日是周的第一天，4 位，与 %V 使用</td></tr><tr><td align="center">%x</td><td align="center">年，其中的星期一是周的第一天，4 位，与 %v 使用</td></tr><tr><td align="center">%Y</td><td align="center">年，4 位</td></tr><tr><td align="center">%y</td><td align="center">年，2 位</td></tr></tbody></table><p>字符串转换为时间 str_to_date(str, format)</p><p>(日期、天数）转换函数：to_days(date), from_days(days)</p><p>(时间、秒）转换函数：time_to_sec(time), sec_to_time(seconds)</p><p>拼凑日期、时间函数：makdedate(year,dayofyear), maketime(hour,minute,second)</p><p>Unix 时间戳、日期）转换函数</p><ol><li>unix_timestamp(),</li><li>unix_timestamp(date),</li><li>from_unixtime(unix_timestamp),</li><li>from_unixtime(unix_timestamp,format)<ol><li>格式化函数 FROM_UNIXTIME(unix_timestamp, [format])</li><li>unix_timestamp 一般为10位的时间戳，如:1417363200</li><li>format <em>可选</em> 转换之后的时间字符串显示的格式;</li></ol></li></ol><h5 id="日期时间计算函数"><a href="#日期时间计算函数" class="headerlink" title="日期时间计算函数"></a>日期时间计算函数</h5><p>增加一个时间间隔：DATE_ADD(date,INTERVAL expr type)</p><ul><li>date 要操作的时间</li><li>expr 要添加的时间间隔</li><li>type 参考下表</li></ul><table><thead><tr><th align="center">type的值</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">MICROSECOND</td><td align="center"></td></tr><tr><td align="center">SECOND</td><td align="center">秒</td></tr><tr><td align="center">MINUTE</td><td align="center">分</td></tr><tr><td align="center">HOUR</td><td align="center">小时</td></tr><tr><td align="center">DAY</td><td align="center">天</td></tr><tr><td align="center">WEEK</td><td align="center">星期</td></tr><tr><td align="center">MONTH</td><td align="center">月</td></tr><tr><td align="center">QUARTER</td><td align="center">?</td></tr><tr><td align="center">YEAR</td><td align="center">年</td></tr><tr><td align="center">SECOND_MICROSECOND</td><td align="center"></td></tr><tr><td align="center">MINUTE_MICROSECOND</td><td align="center"></td></tr><tr><td align="center">MINUTE_SECOND</td><td align="center"></td></tr><tr><td align="center">HOUR_MICROSECOND</td><td align="center"></td></tr><tr><td align="center">HOUR_SECOND</td><td align="center"></td></tr><tr><td align="center">HOUR_MINUTE</td><td align="center"></td></tr><tr><td align="center">DAY_MICROSECOND</td><td align="center"></td></tr><tr><td align="center">DAY_SECOND</td><td align="center"></td></tr><tr><td align="center">DAY_MINUTE</td><td align="center"></td></tr><tr><td align="center">DAY_HOUR</td><td align="center"></td></tr><tr><td align="center">YEAR_MONTH</td><td align="center"></td></tr></tbody></table><blockquote><p>adddate(), addtime()函数，可以用 date_add() 来替代</p></blockquote><p>日期减去一个时间间隔：DATE_SUB(date,INTERVAL expr type)</p><blockquote><p>DATE_SUB(date,INTERVAL expr type) 日期时间函数 和 date_add() 用法一致</p></blockquote><p>日期、时间相减函数：datediff(date1,date2), timediff(time1,time2)</p><ol><li>datediff 返回天数差距</li><li>timediff 返回time差距</li></ol><blockquote><p>注意：timediff(time1,time2) 函数的两个参数类型必须相同。</p></blockquote><p>时间戳（timestamp）转换、增、减函数</p><ol><li>timestamp(date) – date to timestamp</li><li>timestamp(dt,time) – dt + time</li><li>timestampadd(unit,interval,datetime_expr) –</li><li>timestampdiff(unit,datetime_expr1,datetime_expr2) –</li></ol><p>示例:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">select timestamp(<span class="string">&#x27;2008-08-08&#x27;</span>); -- 2008-08-08 00:00:00</span><br><span class="line">select timestamp(<span class="string">&#x27;2008-08-08 08:00:00&#x27;</span>, <span class="string">&#x27;01:01:01&#x27;</span>); -- 2008-08-08 09:01:01</span><br><span class="line">select timestamp(<span class="string">&#x27;2008-08-08 08:00:00&#x27;</span>, <span class="string">&#x27;10 01:01:01&#x27;</span>); -- 2008-08-18 09:01:01</span><br><span class="line"></span><br><span class="line">select timestampadd(day, 1, <span class="string">&#x27;2008-08-08 08:00:00&#x27;</span>); -- 2008-08-09 08:00:00</span><br><span class="line">select date_add(<span class="string">&#x27;2008-08-08 08:00:00&#x27;</span>, interval 1 day); -- 2008-08-09 08:00:00</span><br><span class="line"></span><br><span class="line">timestampadd() 函数类似于 date_add()。</span><br><span class="line">select timestampdiff(year,<span class="string">&#x27;2002-05-01&#x27;</span>,<span class="string">&#x27;2001-01-01&#x27;</span>); -- -1</span><br><span class="line">select timestampdiff(day ,<span class="string">&#x27;2002-05-01&#x27;</span>,<span class="string">&#x27;2001-01-01&#x27;</span>); -- -485</span><br><span class="line">select timestampdiff(hour,<span class="string">&#x27;2008-08-08 12:00:00&#x27;</span>,<span class="string">&#x27;2008-08-08 00:00:00&#x27;</span>); -- -12</span><br><span class="line"></span><br><span class="line">select datediff(<span class="string">&#x27;2008-08-08 12:00:00&#x27;</span>, <span class="string">&#x27;2008-08-01 00:00:00&#x27;</span>); -- 7</span><br></pre></td></tr></table></figure><blockquote><p>timestampdiff() 函数就比 datediff() 功能强多了，datediff() 只能计算两个日期（date）之间相差的天数。</p></blockquote><p>时区（timezone）转换函数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">convert_tz(dt,from_tz,to_tz)</span><br><span class="line"></span><br><span class="line">select convert_tz(<span class="string">&#x27;2008-08-08 12:00:00&#x27;</span>, <span class="string">&#x27;+08:00&#x27;</span>, <span class="string">&#x27;+00:00&#x27;</span>); -- 2008-08-08 04:00:00</span><br></pre></td></tr></table></figure><blockquote><p>时区转换也可以通过 date_add, date_sub, timestampadd 来实现</p></blockquote><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://www.cnblogs.com/chenqionghe/p/4675844.html">MySQL CAST与CONVERT 函数的用法</a></p><p><a href="https://www.cnblogs.com/dest/p/4205371.html">MySQL 日期格式</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>每天都要去折腾才能进步</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习笔记</title>
      <link href="2019/05/16/docker/"/>
      <url>2019/05/16/docker/</url>
      
        <content type="html"><![CDATA[<p>我是一个java程序猿, 当前已经转为nodejs开发, 因为工作需要接触docker到目前为止已经有一年多的时间了, 一下是我学习和使用docker的一些总结.</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="认识docker"><a href="#认识docker" class="headerlink" title="认识docker"></a>认识docker</h3><p>Docker是一个容器平台, 可以说他是一个虚拟机平台, 但是它又比虚拟机强大. Docker是开发人员和系统管理员使用容器开发，部署和运行应用程序的平台。<br>使用Linux容器部署应用程序称为容器化。容器不是新的，但它们用于轻松部署应用程序。</p><h3 id="docker能解决什么问题"><a href="#docker能解决什么问题" class="headerlink" title="docker能解决什么问题"></a>docker能解决什么问题</h3><ol><li>生产开发环境不一致的问题</li></ol><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ol><li>容器</li><li>镜像</li><li>仓库</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://docs.docker.com/install/">参考这里</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看docker版本</span></span><br><span class="line">docker --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看docker信息</span></span><br><span class="line">docker info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试docker是否安装成功</span></span><br><span class="line">docker run hello-world</span><br><span class="line"></span><br><span class="line">Unable to find image <span class="string">&#x27;hello-world:latest&#x27;</span> locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">ca4f61b1923c: Pull complete</span><br><span class="line">Digest: sha256:ca0eeb6fb05351dfc8759c20733c91def84cb8007aa89a5bf606bc8b315b9fc7</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>前提条件: 安装好Docker</p><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><h4 id="创建Dockerfile文件"><a href="#创建Dockerfile文件" class="headerlink" title="创建Dockerfile文件"></a>创建Dockerfile文件</h4><p>在项目根目录下创建一个Dockerfile文件, 如:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将官方 node:9.3.0-alpine 运行时用作父镜像</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">9.3</span>.<span class="number">0</span>-alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /app</span></span><br><span class="line"><span class="comment"># 将工作目录设置为 /app</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前目录内容复制到位于 /app 中的容器中</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /app/temp</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> cp /app/temp/package.json /app/package.json &amp;&amp;\</span></span><br><span class="line"><span class="bash">    npm install --registry=https://registry.npm.taobao.org &amp;&amp;\</span></span><br><span class="line"><span class="bash">    cp -r /app/temp/pages /app/pages &amp;&amp;\</span></span><br><span class="line"><span class="bash">    cp -r /app/temp/components /app/components &amp;&amp;\</span></span><br><span class="line"><span class="bash">    cp -r /app/temp/next.config.js /app/next.config.js &amp;&amp;\</span></span><br><span class="line"><span class="bash">    rm -rf /app/temp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在容器启动时运行</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;npm&quot;</span>, <span class="string">&quot;start&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>有关Dockerfile的命令可以参考这里<a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/">编写Dockerfile的最佳实践</a></p><h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><p>命令:</p><p><code>docker build -t &lt;image-name&gt; .</code>;</p><blockquote><p>-t image-name 是给镜像添加名称<br>. 代表当前根目录<br>可选参数 -f Dockerfile-name 指定Dockerfile文件, 默认是 Dockerfile, 当我们有如: MYSQL.Dockerfile 则可以使用该参数指定 例: <code>docker build -t imagename . -f MySQL.Dockerfile</code></p></blockquote><h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><p>命令:</p><p><code>docker run -d -p 3000:3000 --name &lt;容器名称&gt; &lt;镜像hashid/镜像名称&gt;</code></p><ol><li>-d 参数指定容器在后台运行</li><li>-p 指定容器端口映射, 主机端口:容器端口, 容器端口指容器内部服务对外暴露的端口,如果tomcat对外提供服务的端口为8080</li><li>–name 参数设置容器名称</li><li>最后接对应的镜像 hashid 或者 镜像名称:tag</li></ol><p>其他常用参数:</p><ol><li>–network 指定容器运行的网络环境</li><li>-v 配置容器数据卷, 更多信息参考 高级篇[容器数据]</li><li>–rm 该命令常常与 -v 一起使用, 在删除/停止容器的时候同事清除数据卷映射关系</li><li>–link 链接到其他容器, 新版本推荐使用 –network 指定容器网络环境即可</li></ol><p>容器镜像操作:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker ps; <span class="comment">#查看当前运行的容器</span></span><br><span class="line">docker ps -a; <span class="comment"># 查看所有的容器</span></span><br><span class="line">docker logs &lt;镜像hashid/镜像名称&gt; <span class="comment"># 查看指定容器的日记</span></span><br><span class="line">docker start &lt;容器hashid/容器名称&gt; <span class="comment"># 启动容器</span></span><br><span class="line">docker stop &lt;容器hashid/容器名称&gt; <span class="comment"># 停止容器</span></span><br><span class="line">docker stop -f &lt;镜像hashid/镜像名称&gt; <span class="comment"># 停止容器, 同时删除容器</span></span><br><span class="line">docker rm &lt;容器hashid/容器名称&gt;... <span class="comment"># 删除容器, 可以同时指定多个 &lt;容器hashid/容器名称&gt;</span></span><br><span class="line">docker rmi &lt;镜像hashid/镜像名称&gt; <span class="comment"># 删除镜像, 必须注意的是, 先删除容器才能删除镜像</span></span><br></pre></td></tr></table></figure><p>推送镜像到仓库</p><ol><li>登陆docker仓库 <code>docker login ...</code></li><li>给镜像打标签 <code>docker tag [本地镜像名称]:[版本号] [存储库名称]:[版本号]</code></li><li>推送到镜像仓库 <code>docker push [账号名]/[存储库名称]:[版本号]</code></li><li>尝试拉取镜像 <code>docker pull [账号名]/[存储库名称]:[版本号]</code></li></ol><p>案例</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登陆dockerhub</span></span><br><span class="line">docker login</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建镜像</span></span><br><span class="line">docker build -t arm64v8/myblog:latest .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将本地镜像打标签</span></span><br><span class="line">docker tag arm64v8/myblog:latest jiangzwyz/myblog:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到镜像仓库</span></span><br><span class="line">docker push jiangzwyz/myblog:latest</span><br></pre></td></tr></table></figure><h3 id="服务Swarms"><a href="#服务Swarms" class="headerlink" title="服务Swarms"></a>服务Swarms</h3><p>待补充</p><h2 id="高级篇"><a href="#高级篇" class="headerlink" title="高级篇"></a>高级篇</h2><h3 id="容器数据"><a href="#容器数据" class="headerlink" title="容器数据"></a>容器数据</h3><p>深入了解docker的都会知道docker的方便,但是也会明白docker的缺点,就是容器在被销毁时,其内部的数据将会全部丢失,那么这里我们就将解决这个问题</p><p>最常见的案例就是数据库了, 这里我们以配置 mysql容器为例, 示范如何使用<strong>数据卷</strong>将容器的数据保存到主机上.</p><p>Dockerfile文件:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取 mysql:5.7 官方镜像</span></span><br><span class="line"><span class="keyword">FROM</span> mysql:<span class="number">5.7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置时区 Shanghai</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> cp /usr/share/zoneinfo/PRC /etc/localtime</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ENV 设置 镜像环境变量 mysql 镜像参考官方说明,可以在此配置账户密码</span></span><br><span class="line"><span class="keyword">ENV</span> MYSQL_ROOT_PASSWORD=you_password</span><br><span class="line"><span class="keyword">ENV</span> MYSQL_USER=you_name</span><br><span class="line"><span class="keyword">ENV</span> MYSQL_PASSWORD=you_passowrd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里我使用了自定义mysql的配置文件</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./mysql/mysql.cnf /etc/mysql/conf.d/mysql.cnf</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./mysql/mysqld.cnf /etc/mysql/mysql.conf.d/mysqld.cnf</span></span><br></pre></td></tr></table></figure><p><strong>重点</strong>在这里</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t mysql . -f MYSQL.Dockerfile;</span><br><span class="line">docker run -d -p 3306:3306 --rm -v /mysql/db:/var/lib/mysql --name mysql mysql;</span><br></pre></td></tr></table></figure><p>从当前项目中构建mysql镜像, 然后运行容器时指定主机/mysql/db目录挂载到容器/var/lib/mysql目录(此目录是mysql数据库文件所在)</p><p>数据类的容器,官方都会说明其数据文件存放的位置, 当然我们也可以挂载网盘到容器中.</p><p><img src="./01.png" alt=" "></p><h3 id="容器网络"><a href="#容器网络" class="headerlink" title="容器网络"></a>容器网络</h3><h4 id="使用容器-你就不应该再去管理烦人的IP"><a href="#使用容器-你就不应该再去管理烦人的IP" class="headerlink" title="使用容器,你就不应该再去管理烦人的IP"></a>使用容器,你就不应该再去管理烦人的IP</h4><p>我们载部署项目的时候经常会遇到这个问题, 我们的项目需要连接mysql, 一般我们通过ip去连接*(localhost:3306、127.0.0.1:3306), 这样到还简单,如果我们的mysql IP是动态的, 怎么办? 你改的几次就会抓狂的. 所以我们需要使用到 容器网络  network</p><h4 id="在Docker中建立-自定义-桥网络"><a href="#在Docker中建立-自定义-桥网络" class="headerlink" title="在Docker中建立 自定义 桥网络"></a>在Docker中建立 自定义 桥网络</h4><ol><li>连接到默认bridge网络的容器可以通过IP地址相互通信。Docker不支持默认网桥上的自动服务发现。如果希望容器能够按容器名称解析IP地址，则应使用用户定义的网络。您可以使用旧版docker run –link选项将两个容器链接在一起，但在大多数情况下不建议这样做。</li><li>使用自定义 bridge网络 运行在其中的容器可以发现对方</li><li>要实现 容器间通讯，采用 自定义 桥网络 （容器必须在同一主机中）</li><li>network  桥网络，容器运行再 用户自定义桥网络 中，容器间可以通过 局域网访问（<strong>不适用于分布式主机</strong>），默认桥网络不支持这样</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前主机中网络列表</span></span><br><span class="line">$ docker network ls</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 桥网络</span></span><br><span class="line">$ docker network create --driver bridge [network-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将容器运行在对应的 bridge网络 中，使用 --network=[network-name]</span></span><br><span class="line">$ docker run -d -p 80:80 -p 443:443 --network=[network-name] --name mynginx [container-images-id]</span><br><span class="line">$ docker run -d -p 80:80 -p 443:443 --rm -v ~/../workspace/myimages/images:/app/images &amp;&amp;\</span><br><span class="line">  --network=[network-name] &amp; --name=1.2.3.4 [container-images-id]</span><br></pre></td></tr></table></figure><p>在同一个 network 网络中的两个容器之间通信可以直接使用 容器名称:端口 的方式去访问,<br>如: mysql:3306</p><h3 id="k8s"><a href="#k8s" class="headerlink" title="k8s"></a>k8s</h3><p>容器编排</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="设置容器时区"><a href="#设置容器时区" class="headerlink" title="设置容器时区"></a>设置容器时区</h3><p>时区问题一直都是我们需要解决的问题, 容器同样避免不了这个问题.</p><p>在linux中, 我们可以将本地时间文件拷贝到/etc/localtime即可设置容器时间</p><p>linux的时区设置文件在 /usr/share/zoneinfo/Asia</p><p>我们将设置系统时间为 上海 例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在Dockerfile中添加:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># linux版本: node:9.3.0-alpine</span></span><br><span class="line">RUN apk add --no-cache tzdata &amp;&amp; \</span><br><span class="line">    cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone &amp;&amp; \</span><br><span class="line">    apk del tzdata</span><br><span class="line"></span><br><span class="line"><span class="comment"># 镜像 mysql:5.7</span></span><br><span class="line">RUN cp /usr/share/zoneinfo/PRC /etc/localtime</span><br></pre></td></tr></table></figure><blockquote><p>上海时区/usr/share/zoneinfo/Asia/Shanghai实际上是链接到/usr/share/zoneinfo/PRC时区, 所以在第二个中我们的做法也是可取的.</p></blockquote><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>官方文档是最好的学习资料</p>]]></content>
      
      
      
        <tags>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx学习笔记</title>
      <link href="2019/05/15/nginx/"/>
      <url>2019/05/15/nginx/</url>
      
        <content type="html"><![CDATA[<p>Nginx是一个<strong>轻量级的高性能</strong>HTTP和反向代理服务器, 由俄罗斯人 <strong>伊戈尔·赛索耶夫</strong></p><blockquote><p>这是一个学习笔记, 我想它应该不需要那么详细</p></blockquote><h2 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h2><p>我们既然学习了Docker, 那就要使用Docker</p><p>使用 Docker 安装 Nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从docker hub中查找nginx</span></span><br><span class="line">docker search nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取nginx官方最新稳定版 nginx 镜像</span></span><br><span class="line">docker pull nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 nginx 镜像</span></span><br><span class="line">docker run -d -p 80:80 --name nginx nginx</span><br></pre></td></tr></table></figure><h2 id="Nginx基本概念"><a href="#Nginx基本概念" class="headerlink" title="Nginx基本概念"></a>Nginx基本概念</h2><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><ol><li>~  表示执行一个正则匹配，区分大小写</li><li>~* 表示执行一个正则匹配，不区分大小写</li><li>^~ 表示普通字符匹配。使用前缀匹配。如果匹配成功，则不再匹配其他location。</li><li>=  进行普通字符精确匹配。也就是完全匹配。</li><li>@  它定义一个命名的 location，使用在内部定向时，例如 error_page, try_files</li></ol><h3 id="匹配规则优先级"><a href="#匹配规则优先级" class="headerlink" title="匹配规则优先级"></a>匹配规则优先级</h3><ol><li>等号类型（=）的优先级最高。一旦匹配成功，则不再查找其他匹配项。</li><li>^~类型表达式。一旦匹配成功，则不再查找其他匹配项。</li><li>正则表达式类型（~ ~*）的优先级次之。如果有多个location的正则能匹配的话，则使用正则表达式最长的那个。</li><li>常规字符串匹配类型。按前缀匹配。</li></ol><h3 id="文件及目录匹配"><a href="#文件及目录匹配" class="headerlink" title="文件及目录匹配"></a>文件及目录匹配</h3><ol><li>-f和!-f用来判断是否存在文件</li><li>-d和!-d用来判断是否存在目录</li><li>-e和!-e用来判断是否存在文件或目录</li><li>-x和!-x用来判断文件是否可执行</li></ol><h3 id="rewrite-重定向-指令的最后一项参数为flag标记，flag标记有"><a href="#rewrite-重定向-指令的最后一项参数为flag标记，flag标记有" class="headerlink" title="rewrite(重定向)指令的最后一项参数为flag标记，flag标记有"></a>rewrite(重定向)指令的最后一项参数为flag标记，flag标记有</h3><ol><li>last 相当于apache里面的[L]标记，表示rewrite。</li><li>break 本条规则匹配完成后，终止匹配，不再匹配后面的规则。</li><li>redirect 返回302临时重定向，浏览器地址会显示跳转后的URL地址。</li><li>permanent 返回301永久重定向，浏览器地址会显示跳转后的URL地址。</li></ol><blockquote><p>使用last和break实现URI重写，浏览器地址栏不变。<br>使用alias指令必须用last标记;<br>使用proxy_pass指令时，需要使用break标记。<br>Last标记在本条rewrite规则执行完毕后，会对其所在server{……}标签重新发起请求.<br>break标记则在本条规则匹配完成后，终止匹配。</p></blockquote><h2 id="Nginx配置文件"><a href="#Nginx配置文件" class="headerlink" title="Nginx配置文件"></a>Nginx配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"># nginx进程数，建议设置为等于CPU总核心数.</span><br><span class="line">worker_processes 8;</span><br><span class="line"></span><br><span class="line"># 全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span><br><span class="line">error_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log info;</span><br><span class="line"></span><br><span class="line"># 进程文件</span><br><span class="line">pid &#x2F;var&#x2F;run&#x2F;nginx.pid;</span><br><span class="line"></span><br><span class="line"># 一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，但是nginx分配请求并不均匀，所以建议与ulimit -n的值保持一致。</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line"></span><br><span class="line"># 工作模式与连接数上限</span><br><span class="line">events</span><br><span class="line">&#123;</span><br><span class="line">　　#参考事件模型，use [ kqueue | rtsig | epoll | &#x2F;dev&#x2F;poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I&#x2F;O模型，如果跑在FreeBSD上面，就用kqueue模型。</span><br><span class="line">　　use epoll;</span><br><span class="line">　　#单个进程最大连接数（最大连接数&#x3D;连接数*进程数）</span><br><span class="line">　　worker_connections 65535;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 设定http服务器</span><br><span class="line">http</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    include mime.types; #文件扩展名与文件类型映射表</span><br><span class="line">    default_type application&#x2F;octet-stream; #默认文件类型</span><br><span class="line">    #charset utf-8; #默认编码</span><br><span class="line">    server_names_hash_bucket_size 128; #服务器名字的hash表大小</span><br><span class="line">    client_header_buffer_size 32k; #上传文件大小限制</span><br><span class="line">    large_client_header_buffers 4 64k; #设定请求缓</span><br><span class="line">    client_max_body_size 8m; #设定请求缓</span><br><span class="line">    sendfile on; #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I&#x2F;O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span><br><span class="line">    autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。</span><br><span class="line">    tcp_nopush on; #防止网络阻塞</span><br><span class="line">    tcp_nodelay on; #防止网络阻塞</span><br><span class="line">    keepalive_timeout 120; #长连接超时时间，单位是秒</span><br><span class="line"></span><br><span class="line">    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span><br><span class="line">    fastcgi_connect_timeout 300;</span><br><span class="line">    fastcgi_send_timeout 300;</span><br><span class="line">    fastcgi_read_timeout 300;</span><br><span class="line">    fastcgi_buffer_size 64k;</span><br><span class="line">    fastcgi_buffers 4 64k;</span><br><span class="line">    fastcgi_busy_buffers_size 128k;</span><br><span class="line">    fastcgi_temp_file_write_size 128k;</span><br><span class="line"></span><br><span class="line">    #gzip模块设置</span><br><span class="line">    gzip on; #开启gzip压缩输出</span><br><span class="line">    gzip_min_length 1k; #最小压缩文件大小</span><br><span class="line">    gzip_buffers 4 16k; #压缩缓冲区</span><br><span class="line">    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span><br><span class="line">    gzip_comp_level 2; #压缩等级</span><br><span class="line">    gzip_types text&#x2F;plain application&#x2F;x-javascript text&#x2F;css application&#x2F;xml;</span><br><span class="line">    #压缩类型，默认就已经包含text&#x2F;html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><br><span class="line">    gzip_vary on;</span><br><span class="line">    #limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用</span><br><span class="line"></span><br><span class="line">    # 应用 myblog 是容器网络中的昵称</span><br><span class="line">    upstream blogs &#123;</span><br><span class="line">        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span><br><span class="line">        # 单台机器 weight 设置无意义</span><br><span class="line">        server myblog:3001 weight&#x3D;3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 虚拟主机的配置</span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        listen 80;　　　　#监听端口</span><br><span class="line"></span><br><span class="line">        server_name aa.cn www.aa.cn ; #server_name end  #域名可以有多个，用空格隔开</span><br><span class="line"></span><br><span class="line">        index index.html index.htm index.php;  # 设置访问主页</span><br><span class="line"></span><br><span class="line">        set $subdomain &#39;&#39;;  # 绑定目录为二级域名 bbb.aa.com  根目录 &#x2F;bbb  文件夹</span><br><span class="line"></span><br><span class="line">        if ( $host ~* &quot;(?:(\w+\.)&#123;0,&#125;)(\b(?!www\b)\w+)\.\b(?!(com|org|gov|net|cn)\b)\w+\.[a-zA-Z]+&quot; )</span><br><span class="line">        &#123;</span><br><span class="line">            set $subdomain &quot;&#x2F;$2&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        root &#x2F;home&#x2F;wwwroot&#x2F;aa.cn&#x2F;web$subdomain;# 访问域名跟目录  </span><br><span class="line"></span><br><span class="line">        include rewrite&#x2F;dedecms.conf; #rewrite end   #载入其他配置文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location ~ .*.(php|php5)?$</span><br><span class="line">        &#123;</span><br><span class="line">        　　fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">        　　fastcgi_index index.php;</span><br><span class="line">        　　include fastcgi.conf;</span><br><span class="line">        &#125;</span><br><span class="line">        #图片缓存时间设置</span><br><span class="line">        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">        &#123;</span><br><span class="line">        　　expires 10d;</span><br><span class="line">        &#125;</span><br><span class="line">        #JS和CSS缓存时间设置</span><br><span class="line">        location ~ .*.(js|css)?$</span><br><span class="line">        &#123;</span><br><span class="line">        　　expires 1h;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 日志格式设定</span><br><span class="line"></span><br><span class="line">    log_format access &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">    &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">    &#39;&quot;$http_user_agent&quot; $http_x_forwarded_for&#39;;</span><br><span class="line">    #定义本虚拟主机的访问日志</span><br><span class="line">    access_log &#x2F;var&#x2F;log&#x2F;nginx&#x2F;ha97access.log access;</span><br><span class="line"></span><br><span class="line">    #对 &quot;&#x2F;&quot; 启用反向代理</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line"></span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:88;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        #以下是一些反向代理的配置，可选。</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        client_max_body_size 10m; #允许客户端请求的最大单文件字节数</span><br><span class="line">        client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class="line">        proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class="line">        proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)</span><br><span class="line">        proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class="line">        proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class="line">        proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置</span><br><span class="line">        proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class="line">        proxy_temp_file_write_size 64k;</span><br><span class="line">        #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 设定查看Nginx状态的地址</span><br><span class="line">    location &#x2F;NginxStatus &#123;</span><br><span class="line"></span><br><span class="line">        stub_status on;</span><br><span class="line">        access_log on;</span><br><span class="line">        auth_basic &quot;NginxStatus&quot;;</span><br><span class="line">        auth_basic_user_file conf&#x2F;htpasswd;</span><br><span class="line">        #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #本地动静分离反向代理配置</span><br><span class="line">    #所有jsp的页面均交由tomcat或resin处理</span><br><span class="line">    location ~ .(jsp|jspx|do)?$ &#123;</span><br><span class="line"></span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    #所有静态文件由nginx直接读取不经过tomcat或resin</span><br><span class="line">    location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$</span><br><span class="line">    &#123;</span><br><span class="line">        expires 15d;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ .*.(js|css)?$</span><br><span class="line">    &#123;</span><br><span class="line">        expires 1h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用记录"><a href="#使用记录" class="headerlink" title="使用记录"></a>使用记录</h3><h4 id="nginx热更新"><a href="#nginx热更新" class="headerlink" title="nginx热更新"></a>nginx热更新</h4><p>在docker中,实现nginx热更新 <code>docker exec -i [nginx容器名/id] nginx -s reload</code></p><h3 id="nginx-日志配置"><a href="#nginx-日志配置" class="headerlink" title="nginx 日志配置"></a>nginx 日志配置</h3><p><a href="https://www.cnblogs.com/biglittleant/p/8979856.html">日志配置 参考</a></p><h2 id="进阶使用"><a href="#进阶使用" class="headerlink" title="进阶使用"></a>进阶使用</h2><p>再文章开始, 我们使用docker安装nginx, 我们完全使用了nginx官方的默认配置, 这里我们将使用自定义配置来启动nginx</p><p>首先我们得知道 nginx 官方 docker 镜像得conf文件位置在哪</p><p>我得nginx版本conf文件在: /etc/nginx/nginx.conf (可能不同版本的配置文件会有所不同, 所以我们在拉取镜像的时候最好固定版本)</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://www.cnblogs.com/xuey/p/7631690.html">Nginx配置文件nginx.conf详解</a></p><p><a href="https://www.cnblogs.com/sign-ptk/p/6723048.html">nginx的location配置详解</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IIS服务器学习</title>
      <link href="2019/05/15/iis/"/>
      <url>2019/05/15/iis/</url>
      
        <content type="html"><![CDATA[<p>IIS是Internet Information Services的缩写. 微软公司提供的基于运行Microsoft Windows的互联网基本服务. IIS是一种Web（网页）服务组件，其中包括Web服务器、FTP服务器、NNTP服务器和SMTP服务器，分别用于网页浏览、文件传输、新闻服务和邮件发送等方面，它使得在网络（包括互联网和局域网）上发布信息成了一件很容易的事.</p><h2 id="IIS-服务器"><a href="#IIS-服务器" class="headerlink" title="IIS 服务器"></a>IIS 服务器</h2><p>IIS服务器是Windows自带的一个服务器, 默认是禁用的, 我们需要在 控制面板 -&gt; 程序与应用 中开启这个服务, 然后在管理工具中添加你的网站即可.</p><h2 id="配置IIS服务"><a href="#配置IIS服务" class="headerlink" title="配置IIS服务"></a>配置IIS服务</h2><blockquote><p>我以 windows 10 为例</p></blockquote><p>找到控制面板, 打开<strong>程序和功能</strong>, 点击左侧的<strong>启用和关闭windows功能</strong></p><p><img src="./iis_01.png" alt=" "></p><p><img src="./iis_02.png" alt=" "></p><p>如图所示, 勾选 <strong>Internet Information Service</strong> 选项, 会自动帮你选中子选项, 到这里一个简单的iis服务器就算启动了</p><p><img src="./iis_03.png" alt=" "></p><blockquote><p><a href="http://localhost/">浏览器输入(或点击这里)</a>就可以看到以下信息</p></blockquote><p><img src="./iis_04.png" alt=" "></p><h2 id="管理你的网站"><a href="#管理你的网站" class="headerlink" title="管理你的网站"></a>管理你的网站</h2><h3 id="管理界面"><a href="#管理界面" class="headerlink" title="管理界面"></a>管理界面</h3><p>同样的在控制面板, 打开<strong>管理工具</strong>, 找到<strong>Internet Information Service(IIS)管理器</strong></p><p><img src="./iis_05.png" alt=" "></p><p>这个就是你的IIS服务器的管理界面</p><h3 id="添加网站"><a href="#添加网站" class="headerlink" title="添加网站"></a>添加网站</h3><p>右键<strong>服务器</strong>/<strong>网站</strong>选择<strong>添加网站</strong>, 出现如下界面, 填写网站相关信息即可.</p><p><img src="./iis_06.png" alt=" "></p><p>我将本机的一个图片目录部署为一个网站, <em>图片服务器</em></p><ol><li>网站名称, 即你的网站名字.</li><li>应用程序池, 默认即可, 深入的再探讨.</li><li>物理路径, 就是你的项目所在路径</li><li>绑定<ol><li>类型 http/htts, 如果选择为 https 还需要配置证书</li><li>IP地址段, 你可以在你局域网的IP段内自定义, 默认就是本机IP(localhost、127.0.0.1)</li><li>端口不能重复, 这里我配置为 8001</li></ol></li><li>主机名,就是你的域名, 默认不需要修改, 相应的修改需要配置 hosts 文件 (路径”C:\Windows\System32\drivers\etc\hosts”)</li></ol><p>最后一步, 点击确认保存, 你可以看到:</p><p><img src="./iis_07.png" alt=" "></p><p>打开浏览器,输入 <a href="http://localhost:8001/1.jpg">localhost:8001/1.jpg</a>, 你可以看到:</p><p><img src="./iis_08.png" alt=" "></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>学无止境</p>]]></content>
      
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown学习</title>
      <link href="2019/04/26/markdown/"/>
      <url>2019/04/26/markdown/</url>
      
        <content type="html"><![CDATA[<p>这个网站都是所有的文章都是使用 Markdown 编写的,所以我们有必要了解一下 Markdown 的基本语法</p><h2 id="我们需要了解的"><a href="#我们需要了解的" class="headerlink" title="我们需要了解的"></a>我们需要了解的</h2><ol><li>Markdown 是什么</li><li>为什么要用 Markdown</li><li>怎么使用 Markdown 基本语法</li><li>总结</li></ol><h3 id="什么是-Markdown"><a href="#什么是-Markdown" class="headerlink" title="什么是 Markdown"></a>什么是 Markdown</h3><ul><li>Markdown 是一个简单的标记语言,通过<strong>简单的</strong>几个标记使得普通文本文字具有一定的格式,用来写博客再好不过了.</li></ul><h3 id="为什么要用-Markdown"><a href="#为什么要用-Markdown" class="headerlink" title="为什么要用 Markdown"></a>为什么要用 Markdown</h3><ul><li><strong>上手快</strong>,语法简单 只需要记住几个符号就能上手了.</li><li>Markdwon 有着 易读、易写、易更改 等特点</li><li>Markdwon 最终是被编译成 HTML 代码执行的</li><li>Markdwon 支持原生html代码, 如: <span style="color: red; font-size: 18px;">Markdwon 支持原生html代码 (红色 18px 字体)</span></li></ul><h3 id="Markdown-的基本语法"><a href="#Markdown-的基本语法" class="headerlink" title="Markdown 的基本语法"></a>Markdown 的基本语法</h3><h4 id="标题标签-、-、"><a href="#标题标签-、-、" class="headerlink" title="标题标签 (#、=、-)"></a>标题标签 (#、=、-)</h4><blockquote><p>两种形式:使用 # 符号代表1-6级标题标签, <strong>个数</strong>为级别;  使用 =、- 代表 一、二级标签</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题&lt;h1&gt;</span><br><span class="line">## 二级标题 &lt;h2&gt;</span><br><span class="line">### 三级标题 &lt;h3&gt;</span><br><span class="line">#### 四级标题 &lt;h4&gt;</span><br><span class="line">##### 五级标题 &lt;h5&gt;</span><br></pre></td></tr></table></figure><h4 id="段落标签-gt"><a href="#段落标签-gt" class="headerlink" title="段落标签 (&gt;)"></a>段落标签 (&gt;)</h4><blockquote><p>段落(引用)标签 符号与内容之间要有空格, 单个为主,内嵌几层就打几个 <strong>&gt;</strong>    (ps:貌似可以一致打下去)</p><blockquote><p>内嵌1     &gt;&gt; 内嵌1</p><blockquote><p>内嵌2    &gt;&gt;&gt; 内嵌2</p><blockquote><p>内嵌3   &gt;&gt;&gt;&gt; 内嵌3</p></blockquote></blockquote></blockquote></blockquote><h4 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h4><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>*<span class="strong">*字体加粗*</span>*  给字体加粗,在字体左右各加两个 <span class="strong">*</span></span><br><span class="line"><span class="strong">*</span> <span class="strong">*斜体字*</span>  使文字倾斜,在文字左右各加一个 <span class="strong">*</span></span><br><span class="line"><span class="strong">*</span> **<span class="strong">*斜体加粗*</span>**  要使文字加粗、倾斜,在文字左右各加三个 <span class="strong">*</span></span><br><span class="line"><span class="strong">*</span> ~~加删除线的文字~~ 左右各 两个 ~</span><br></pre></td></tr></table></figure><ul><li><strong>字体加粗</strong>  给字体加粗,在字体左右各加两个 *</li><li><em>斜体字</em>  使文字倾斜,在文字左右各加一个 *</li><li><strong><em>斜体加粗</em></strong>  要使文字加粗、倾斜,在文字左右各加三个 *</li><li><del>加删除线的文字</del> 左右各 两个 ~</li></ul><h4 id="分割线-、"><a href="#分割线-、" class="headerlink" title="分割线 (-、*)"></a>分割线 (-、*)</h4><blockquote><p>三个(-、*)及三个以上符号即可</p></blockquote><p>效果如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">***</span></span><br><span class="line"><span class="string">*</span> <span class="string">*</span> <span class="string">*</span></span><br></pre></td></tr></table></figure><p>符号(-)分割线</p><hr><p>符号(*)分割线</p><hr><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p>基本语法</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![图片语法](https://images.jzwyz.com/blog/tpurl.png <span class="string">&quot;这是对图片语法的说明图&quot;</span>)</span><br><span class="line">![图片alt](https://images.jzwyz.com/blog/1.jpg <span class="string">&quot;图片title&quot;</span>)</span><br><span class="line">![链接语法](https://images.jzwyz.com/blog/urlsm.png <span class="string">&quot;链接语法说明&quot;</span>)</span><br></pre></td></tr></table></figure><p>效果:</p><p><img src="https://images.jzwyz.com/blog/tpurl.png" alt="图片语法" title="这是对图片语法的说明图"></p><p><img src="https://images.jzwyz.com/blog/1.jpg" alt="图片alt" title="图片title"></p><p><img src="https://images.jzwyz.com/blog/urlsm.png" alt="链接语法" title="链接语法说明"></p><blockquote><p>图片alt 显示在图片下方<br>图片title 就是图片描述,当鼠标移到图片上时显示的内容。title可加可不加 title与url之间以 空格 隔开</p></blockquote><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>与图片语法类似, 开始 不要 ! 符号</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[百度](https://www.baidu.com <span class="string">&quot;百度一下&quot;</span>)</span><br><span class="line">[Github](https://www.github.com <span class="string">&quot;去Github&quot;</span>)</span><br></pre></td></tr></table></figure><p><a href="https://www.baidu.com/" title="百度一下">百度</a></p><p><a href="https://www.github.com/" title="去Github">Github</a></p><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 有序列表</span><br><span class="line"><span class="bullet">2.</span> 有序列表</span><br><span class="line"><span class="bullet">3.</span> 有序列表</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 无序列表 <span class="emphasis">*</span></span><br><span class="line"><span class="emphasis">  + 无序列表 +</span></span><br><span class="line"><span class="emphasis">    - 无序列表 -</span></span><br><span class="line"><span class="emphasis">  + 无序列白</span></span><br><span class="line"><span class="emphasis">*</span> 无序列表</span><br></pre></td></tr></table></figure><p>效果:</p><ol><li>有序列表</li><li>有序列表</li><li>有序列表</li></ol><ul><li>无序列表 *<ul><li>无序列表 +<ul><li>无序列表 -</li></ul></li><li>无序列白</li></ul></li><li>无序列表</li></ul><blockquote><p>列表 分为无序和有序,其语法区别就是 有序列表以**数字.**为符号 序号和内容之间空格分开</p></blockquote><blockquote><p>无序列表 有 (*、+、-) 三个符号, 使用多个时,最顶层应使用 *,次级使用 +,再次级使用 -</p></blockquote><blockquote><p>列表嵌套 下级与上级换行,缩进三个空格</p></blockquote><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><p>示列 md 代码:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">列名|列名|列名</span><br><span class="line">--|:-:|:--—</span><br><span class="line">内容|内|内容呀</span><br></pre></td></tr></table></figure><p>第一行 | 符号分格列名</p><p>第二行 - 代码该列中一个字符,一般设置为该列最长字符数量, : 放在 - 哪边就表示 该列字段向:对齐, | 符号分隔列</p><p>再往下,就是每列的数据列</p><table><thead><tr><th align="right">编号</th><th align="center">姓名</th><th align="right">性别</th><th align="left">年龄</th></tr></thead><tbody><tr><td align="right">01</td><td align="center">小明</td><td align="right">男</td><td align="left">12</td></tr><tr><td align="right">02</td><td align="center">小小红</td><td align="right">女</td><td align="left">15</td></tr></tbody></table><h4 id="代码块语法"><a href="#代码块语法" class="headerlink" title="代码块语法"></a>代码块语法</h4><p>效果如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是代码块</span><br></pre></td></tr></table></figure><p><code>这是代码行</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定 语言</span></span><br><span class="line">docker run -d --rm -v ~/../workspace/my-blog/<span class="built_in">source</span>:/app/<span class="built_in">source</span> --network=app-bridge --name=webblog myblog:1.0</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node --version</span><br></pre></td></tr></table></figure><p><img src="https://images.jzwyz.com/blog/dmkyf.png" alt="代码块语法" title="代码块语法"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2019/01/01/hello-world/"/>
      <url>2019/01/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hello World </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的个人博客</title>
      <link href="2018/11/04/%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>2018/11/04/%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="这是我的第一个博客"><a href="#这是我的第一个博客" class="headerlink" title="这是我的第一个博客"></a>这是我的第一个博客</h2><p>这个博客模版好坑,如果内容过短,在拉到最下面的时候就会自动弹到上面反复的弹</p><h2 id="这个项目怎么跑"><a href="#这个项目怎么跑" class="headerlink" title="这个项目怎么跑"></a>这个项目怎么跑</h2><p><code>docker run -d -p 4000:4000 --rm -v ~/myWorkspace/myproject/myblog/source:/app/source --network=app-bridge --name=webblog myblog:1.4</code></p><h3 id="命令说明"><a href="#命令说明" class="headerlink" title="命令说明"></a>命令说明</h3><ul><li><strong>-d</strong>   docker在后台运行</li><li><strong>-p</strong>   指定容器运行的端口映射到机器端口, [内部]:[外部]</li><li><strong>–rm</strong> 停止容器即删除</li><li><strong>-v</strong>   docker数据卷操作, 将<strong>机器路径</strong>~/myWorkspace/myproject/myblog/source 挂载到<strong>容器路径</strong>/app/source  参考<a href="https://docs.docker-cn.com/engine/tutorials/dockervolumes/">管理容器中的数据</a></li><li><strong>–network</strong>  docker网络操作, 将容器运行在 app-bridge 桥网络中, 参考<a href="https://docs.docker-cn.com/engine/userguide/networking/">docker容器网络</a></li><li><strong>–name</strong> 容器的名称</li><li><strong>myblog:1.4</strong>  这个是容器的镜像 *<strong>:</strong> 前面是镜像名称,后面是 镜像版本</li></ul><h2 id="开启搜索功能"><a href="#开启搜索功能" class="headerlink" title="开启搜索功能"></a>开启搜索功能</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm i hexo-generator-search --save</span></span><br></pre></td></tr></table></figure><p>_config.yml 配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.json</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br></pre></td></tr></table></figure><h2 id="考虑加入admin功能"><a href="#考虑加入admin功能" class="headerlink" title="考虑加入admin功能"></a>考虑加入admin功能</h2><p>需要在Dockerfiler添加一下依赖<br><code>npm install --save hexo-admin-ehc --save --registry=https://registry.npm.taobao.org</code></p><p>修改_config.xml文件, 当然这是可选的,设置后台密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">admin:</span><br><span class="line">  username: jason</span><br><span class="line">  password_hash: <span class="variable">$2a</span><span class="variable">$05</span><span class="variable">$XdoQHWQBCutMxgX3iBG0XOfov2LTNelkMDbtMCkaQRgqhoMdV4tAe</span></span><br><span class="line">  secret: jason</span><br></pre></td></tr></table></figure><p>设置admin基本属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">metadata:</span><br><span class="line">  author_id: defaultAuthorId</span><br><span class="line">  language: zh</span><br></pre></td></tr></table></figure><h3 id="以下为占位符"><a href="#以下为占位符" class="headerlink" title="以下为占位符"></a>以下为占位符</h3><blockquote><p>需要注意的是 最后面 myblog:1.0  这个 1.0 代表镜像版本,一情况而定</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 随便写写 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
